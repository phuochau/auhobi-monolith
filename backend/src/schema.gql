# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type VehicleBody {
  name: String!
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type VehicleModelBody {
  picture: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  body: VehicleBody!
  model: VehicleModel!
}

type VehicleEngine {
  name: String!
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleTransmission {
  name: String!
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleBrand {
  name: String!
  startYear: Int
  endYear: Int
  logo: String
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleModel {
  name: String!
  startYear: Int!
  metadata: JSON
  id: ID!
  endYear: Int
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  parent: VehicleModel
  brand: VehicleBrand
  bodies(
    """Specify to filter the records returned."""
    filter: VehicleModelBodyFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleModelBodySort!]! = []
  ): [VehicleModelBody!]!
  engines(
    """Specify to filter the records returned."""
    filter: VehicleEngineFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleEngineSort!]! = []
  ): [VehicleEngine!]!
  transmissions(
    """Specify to filter the records returned."""
    filter: VehicleTransmissionFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleTransmissionSort!]! = []
  ): [VehicleTransmission!]!
}

input VehicleModelBodyFilter {
  and: [VehicleModelBodyFilter!]
  or: [VehicleModelBodyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  model: VehicleModelBodyFilterVehicleModelFilter
  body: VehicleModelBodyFilterVehicleBodyFilter
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input VehicleModelBodyFilterVehicleModelFilter {
  and: [VehicleModelBodyFilterVehicleModelFilter!]
  or: [VehicleModelBodyFilterVehicleModelFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input VehicleModelBodyFilterVehicleBodyFilter {
  and: [VehicleModelBodyFilterVehicleBodyFilter!]
  or: [VehicleModelBodyFilterVehicleBodyFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelBodySort {
  field: VehicleModelBodySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleModelBodySortFields {
  id
  createdAt
  updatedAt
  deletedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input VehicleEngineFilter {
  and: [VehicleEngineFilter!]
  or: [VehicleEngineFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleEngineSort {
  field: VehicleEngineSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleEngineSortFields {
  name
  id
  createdAt
  updatedAt
  deletedAt
}

input VehicleTransmissionFilter {
  and: [VehicleTransmissionFilter!]
  or: [VehicleTransmissionFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleTransmissionSort {
  field: VehicleTransmissionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleTransmissionSortFields {
  name
  id
  createdAt
  updatedAt
  deletedAt
}

type UserVehicle {
  name: String
  customModel: String
  picture: String
  status: UserVechileStatus
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  owner: User!
  model: VehicleModel!
  body: VehicleModelBody!
  engine: VehicleEngine!
  transmission: VehicleTransmission!
}

enum UserVechileStatus {
  ACTIVATED
  UNACTIVATED
  BLOCKED
}

type User {
  phone_number: String
  avatar: String
  status: UserStatus!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  vehiclesAggregate(
    """Filter to find records to aggregate on"""
    filter: UserVehicleAggregateFilter
  ): [UserVehiclesAggregateResponse!]!
  account: Account!
  vehicles(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: UserVehicleFilter! = {}

    """Specify to sort results."""
    sorting: [UserVehicleSort!]! = []
  ): UserVehiclesConnection
}

enum UserStatus {
  ACTIVATED
  UNACTIVATED
  BLOCKED
}

input UserVehicleAggregateFilter {
  and: [UserVehicleAggregateFilter!]
  or: [UserVehicleAggregateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  transmission: UserVehicleAggregateFilterVehicleTransmissionAggregateFilter
  engine: UserVehicleAggregateFilterVehicleEngineAggregateFilter
  body: UserVehicleAggregateFilterVehicleModelBodyAggregateFilter
  model: UserVehicleAggregateFilterVehicleModelAggregateFilter
  owner: UserVehicleAggregateFilterUserAggregateFilter
}

input UserVechileStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserVechileStatus
  neq: UserVechileStatus
  gt: UserVechileStatus
  gte: UserVechileStatus
  lt: UserVechileStatus
  lte: UserVechileStatus
  like: UserVechileStatus
  notLike: UserVechileStatus
  iLike: UserVechileStatus
  notILike: UserVechileStatus
  in: [UserVechileStatus!]
  notIn: [UserVechileStatus!]
}

input UserVehicleAggregateFilterVehicleTransmissionAggregateFilter {
  and: [UserVehicleAggregateFilterVehicleTransmissionAggregateFilter!]
  or: [UserVehicleAggregateFilterVehicleTransmissionAggregateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleAggregateFilterVehicleEngineAggregateFilter {
  and: [UserVehicleAggregateFilterVehicleEngineAggregateFilter!]
  or: [UserVehicleAggregateFilterVehicleEngineAggregateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleAggregateFilterVehicleModelBodyAggregateFilter {
  and: [UserVehicleAggregateFilterVehicleModelBodyAggregateFilter!]
  or: [UserVehicleAggregateFilterVehicleModelBodyAggregateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleAggregateFilterVehicleModelAggregateFilter {
  and: [UserVehicleAggregateFilterVehicleModelAggregateFilter!]
  or: [UserVehicleAggregateFilterVehicleModelAggregateFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleAggregateFilterUserAggregateFilter {
  and: [UserVehicleAggregateFilterUserAggregateFilter!]
  or: [UserVehicleAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserStatus
  neq: UserStatus
  gt: UserStatus
  gte: UserStatus
  lt: UserStatus
  lte: UserStatus
  like: UserStatus
  notLike: UserStatus
  iLike: UserStatus
  notILike: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input UserVehicleFilter {
  and: [UserVehicleFilter!]
  or: [UserVehicleFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  transmission: UserVehicleFilterVehicleTransmissionFilter
  engine: UserVehicleFilterVehicleEngineFilter
  body: UserVehicleFilterVehicleModelBodyFilter
  model: UserVehicleFilterVehicleModelFilter
  owner: UserVehicleFilterUserFilter
}

input UserVehicleFilterVehicleTransmissionFilter {
  and: [UserVehicleFilterVehicleTransmissionFilter!]
  or: [UserVehicleFilterVehicleTransmissionFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleFilterVehicleEngineFilter {
  and: [UserVehicleFilterVehicleEngineFilter!]
  or: [UserVehicleFilterVehicleEngineFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleFilterVehicleModelBodyFilter {
  and: [UserVehicleFilterVehicleModelBodyFilter!]
  or: [UserVehicleFilterVehicleModelBodyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleFilterVehicleModelFilter {
  and: [UserVehicleFilterVehicleModelFilter!]
  or: [UserVehicleFilterVehicleModelFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleFilterUserFilter {
  and: [UserVehicleFilterUserFilter!]
  or: [UserVehicleFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserVehicleSort {
  field: UserVehicleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserVehicleSortFields {
  name
  customModel
  status
  id
  createdAt
  updatedAt
  deletedAt
}

type Account {
  email: String!
  role: AccountRole!
  firstName: String
  lastName: String
  id: ID!
  emailVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  user: User!
}

enum AccountRole {
  USER
  ADMIN
  SUPERADMIN
}

type File {
  name: String!
  mimetype: String!
  refId: String
  url: String!
  secureUrl: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: Account!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type FileDeleteResponse {
  name: String
  mimetype: String
  refId: String
  url: String
  secureUrl: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type FileEdge {
  """The node containing the File"""
  node: File!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type FileConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [FileEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FileAggregateGroupBy {
  name: String
  mimetype: String
  refId: String
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

"""Group by"""
enum GroupBy {
  DAY
  WEEK
  MONTH
  YEAR
}

type FileCountAggregate {
  name: Int
  mimetype: Int
  refId: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type FileMinAggregate {
  name: String
  mimetype: String
  refId: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type FileMaxAggregate {
  name: String
  mimetype: String
  refId: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type FileAggregateResponse {
  groupBy: FileAggregateGroupBy
  count: FileCountAggregate
  min: FileMinAggregate
  max: FileMaxAggregate
}

type AccountPasswordReset {
  token: String!
  code: String!
  id: ID!
  used: Boolean!
  expiredAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  account: Account!
}

type AccountVerfication {
  token: String!
  code: String!
  id: ID!
  used: Boolean!
  expiredAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  account: Account!
}

type LoginResult {
  account: Account!
  accessToken: String!
  refreshToken: String!
}

type AccountDeleteResponse {
  email: String
  role: AccountRole
  firstName: String
  lastName: String
  id: ID
  emailVerified: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountEdge {
  """The node containing the Account"""
  node: Account!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AccountConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AccountEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AccountAggregateGroupBy {
  email: String
  role: AccountRole
  firstName: String
  lastName: String
  id: ID
  emailVerified: Boolean
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type AccountCountAggregate {
  email: Int
  role: Int
  firstName: Int
  lastName: Int
  id: Int
  emailVerified: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type AccountSumAggregate {
  role: Float
}

type AccountAvgAggregate {
  role: Float
}

type AccountMinAggregate {
  email: String
  role: AccountRole
  firstName: String
  lastName: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountMaxAggregate {
  email: String
  role: AccountRole
  firstName: String
  lastName: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountAggregateResponse {
  groupBy: AccountAggregateGroupBy
  count: AccountCountAggregate
  sum: AccountSumAggregate
  avg: AccountAvgAggregate
  min: AccountMinAggregate
  max: AccountMaxAggregate
}

type AccountVerficationDeleteResponse {
  token: String
  code: String
  id: ID
  used: Boolean
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountVerficationEdge {
  """The node containing the AccountVerfication"""
  node: AccountVerfication!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AccountVerficationConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AccountVerficationEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AccountVerficationAggregateGroupBy {
  token: String
  code: String
  id: ID
  used: Boolean
  expiredAt(by: GroupBy! = DAY): DateTime
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type AccountVerficationCountAggregate {
  token: Int
  code: Int
  id: Int
  used: Int
  expiredAt: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type AccountVerficationMinAggregate {
  token: String
  code: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountVerficationMaxAggregate {
  token: String
  code: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountVerficationAggregateResponse {
  groupBy: AccountVerficationAggregateGroupBy
  count: AccountVerficationCountAggregate
  min: AccountVerficationMinAggregate
  max: AccountVerficationMaxAggregate
}

type AccountPasswordResetDeleteResponse {
  token: String
  code: String
  id: ID
  used: Boolean
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountPasswordResetEdge {
  """The node containing the AccountPasswordReset"""
  node: AccountPasswordReset!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type AccountPasswordResetConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [AccountPasswordResetEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AccountPasswordResetAggregateGroupBy {
  token: String
  code: String
  id: ID
  used: Boolean
  expiredAt(by: GroupBy! = DAY): DateTime
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type AccountPasswordResetCountAggregate {
  token: Int
  code: Int
  id: Int
  used: Int
  expiredAt: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type AccountPasswordResetMinAggregate {
  token: String
  code: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountPasswordResetMaxAggregate {
  token: String
  code: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type AccountPasswordResetAggregateResponse {
  groupBy: AccountPasswordResetAggregateGroupBy
  count: AccountPasswordResetCountAggregate
  min: AccountPasswordResetMinAggregate
  max: AccountPasswordResetMaxAggregate
}

type ApiKey {
  name: String!
  key: String!
  secret: String!
  id: ID!
  expired: Boolean!
  expiredAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type ApiKeyDeleteResponse {
  name: String
  key: String
  secret: String
  id: ID
  expired: Boolean
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ApiKeyEdge {
  """The node containing the ApiKey"""
  node: ApiKey!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ApiKeyConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ApiKeyEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ApiKeyAggregateGroupBy {
  name: String
  id: ID
  expired: Boolean
  expiredAt(by: GroupBy! = DAY): DateTime
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ApiKeyCountAggregate {
  name: Int
  id: Int
  expired: Int
  expiredAt: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ApiKeyMinAggregate {
  name: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ApiKeyMaxAggregate {
  name: String
  id: ID
  expiredAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ApiKeyAggregateResponse {
  groupBy: ApiKeyAggregateGroupBy
  count: ApiKeyCountAggregate
  min: ApiKeyMinAggregate
  max: ApiKeyMaxAggregate
}

type OrgBranchMember {
  role: OrgBranchRole!
  enabled: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  account: Account!
  branch: OrgBranch!
}

enum OrgBranchRole {
  VIEWER
  EDITOR
  MANAGER
  OWNER
}

type OrgBranch {
  name: String!
  phone_number: String
  details: JSON
  status: OrgBranchStatus!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  membersAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgBranchMemberAggregateFilter
  ): [OrgBranchMembersAggregateResponse!]!
  org: Org!
  members(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrgBranchMemberFilter! = {}

    """Specify to sort results."""
    sorting: [OrgBranchMemberSort!]! = []
  ): OrgBranchMembersConnection!
}

enum OrgBranchStatus {
  ACTIVATED
  UNACTIVATED
  BLOCKED
}

input OrgBranchMemberAggregateFilter {
  and: [OrgBranchMemberAggregateFilter!]
  or: [OrgBranchMemberAggregateFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgBranchMemberAggregateFilterOrgBranchAggregateFilter
  account: OrgBranchMemberAggregateFilterAccountAggregateFilter
}

input OrgBranchRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrgBranchRole
  neq: OrgBranchRole
  gt: OrgBranchRole
  gte: OrgBranchRole
  lt: OrgBranchRole
  lte: OrgBranchRole
  like: OrgBranchRole
  notLike: OrgBranchRole
  iLike: OrgBranchRole
  notILike: OrgBranchRole
  in: [OrgBranchRole!]
  notIn: [OrgBranchRole!]
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input OrgBranchMemberAggregateFilterOrgBranchAggregateFilter {
  and: [OrgBranchMemberAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgBranchMemberAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input JSONFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: JSON
  neq: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  like: JSON
  notLike: JSON
  iLike: JSON
  notILike: JSON
  in: [JSON!]
  notIn: [JSON!]
}

input OrgBranchStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrgBranchStatus
  neq: OrgBranchStatus
  gt: OrgBranchStatus
  gte: OrgBranchStatus
  lt: OrgBranchStatus
  lte: OrgBranchStatus
  like: OrgBranchStatus
  notLike: OrgBranchStatus
  iLike: OrgBranchStatus
  notILike: OrgBranchStatus
  in: [OrgBranchStatus!]
  notIn: [OrgBranchStatus!]
}

input OrgBranchMemberAggregateFilterAccountAggregateFilter {
  and: [OrgBranchMemberAggregateFilterAccountAggregateFilter!]
  or: [OrgBranchMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AccountRole
  neq: AccountRole
  gt: AccountRole
  gte: AccountRole
  lt: AccountRole
  lte: AccountRole
  like: AccountRole
  notLike: AccountRole
  iLike: AccountRole
  notILike: AccountRole
  in: [AccountRole!]
  notIn: [AccountRole!]
}

input OrgBranchMemberFilter {
  and: [OrgBranchMemberFilter!]
  or: [OrgBranchMemberFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgBranchMemberFilterOrgBranchFilter
  account: OrgBranchMemberFilterAccountFilter
}

input OrgBranchMemberFilterOrgBranchFilter {
  and: [OrgBranchMemberFilterOrgBranchFilter!]
  or: [OrgBranchMemberFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchMemberFilterAccountFilter {
  and: [OrgBranchMemberFilterAccountFilter!]
  or: [OrgBranchMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchMemberSort {
  field: OrgBranchMemberSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrgBranchMemberSortFields {
  role
  enabled
  id
  createdAt
  updatedAt
  deletedAt
}

type ShopMember {
  role: ShopMemberRole!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  account: Account!
  shop: Shop!
}

enum ShopMemberRole {
  VIEWER
  EDITOR
  MANAGER
  OWNER
}

type Shop {
  name: String!
  details: JSON
  enabled: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  membersAggregate(
    """Filter to find records to aggregate on"""
    filter: ShopMemberAggregateFilter
  ): [ShopMembersAggregateResponse!]!
  org: Org!
  branch: OrgBranch!
  members(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ShopMemberFilter! = {}

    """Specify to sort results."""
    sorting: [ShopMemberSort!]! = []
  ): ShopMembersConnection!
}

input ShopMemberAggregateFilter {
  and: [ShopMemberAggregateFilter!]
  or: [ShopMemberAggregateFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  shop: ShopMemberAggregateFilterShopAggregateFilter
  account: ShopMemberAggregateFilterAccountAggregateFilter
}

input ShopMemberRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ShopMemberRole
  neq: ShopMemberRole
  gt: ShopMemberRole
  gte: ShopMemberRole
  lt: ShopMemberRole
  lte: ShopMemberRole
  like: ShopMemberRole
  notLike: ShopMemberRole
  iLike: ShopMemberRole
  notILike: ShopMemberRole
  in: [ShopMemberRole!]
  notIn: [ShopMemberRole!]
}

input ShopMemberAggregateFilterShopAggregateFilter {
  and: [ShopMemberAggregateFilterShopAggregateFilter!]
  or: [ShopMemberAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopMemberAggregateFilterAccountAggregateFilter {
  and: [ShopMemberAggregateFilterAccountAggregateFilter!]
  or: [ShopMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopMemberFilter {
  and: [ShopMemberFilter!]
  or: [ShopMemberFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  shop: ShopMemberFilterShopFilter
  account: ShopMemberFilterAccountFilter
}

input ShopMemberFilterShopFilter {
  and: [ShopMemberFilterShopFilter!]
  or: [ShopMemberFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopMemberFilterAccountFilter {
  and: [ShopMemberFilterAccountFilter!]
  or: [ShopMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopMemberSort {
  field: ShopMemberSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ShopMemberSortFields {
  role
  id
  createdAt
  updatedAt
  deletedAt
}

type Org {
  type: OrgType!
  name: String!
  details: JSON
  status: OrgStatus!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  membersAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgMemberAggregateFilter
  ): [OrgMembersAggregateResponse!]!
  branchesAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgBranchAggregateFilter
  ): [OrgBranchesAggregateResponse!]!
  shopsAggregate(
    """Filter to find records to aggregate on"""
    filter: ShopAggregateFilter
  ): [OrgShopsAggregateResponse!]!
  createdBy: Account!
  members(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrgMemberFilter! = {}

    """Specify to sort results."""
    sorting: [OrgMemberSort!]! = []
  ): OrgMembersConnection
  branches(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrgBranchFilter! = {}

    """Specify to sort results."""
    sorting: [OrgBranchSort!]! = []
  ): OrgBranchesConnection
  shops(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ShopFilter! = {}

    """Specify to sort results."""
    sorting: [ShopSort!]! = []
  ): OrgShopsConnection
}

enum OrgType {
  DEFAULT
}

enum OrgStatus {
  ACTIVATED
  UNACTIVATED
  BLOCKED
}

input OrgMemberAggregateFilter {
  and: [OrgMemberAggregateFilter!]
  or: [OrgMemberAggregateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgMemberAggregateFilterOrgAggregateFilter
  account: OrgMemberAggregateFilterAccountAggregateFilter
}

input OrgRoleFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrgRole
  neq: OrgRole
  gt: OrgRole
  gte: OrgRole
  lt: OrgRole
  lte: OrgRole
  like: OrgRole
  notLike: OrgRole
  iLike: OrgRole
  notILike: OrgRole
  in: [OrgRole!]
  notIn: [OrgRole!]
}

enum OrgRole {
  MEMBER
  MANAGER
  OWNER
}

input OrgMemberAggregateFilterOrgAggregateFilter {
  and: [OrgMemberAggregateFilterOrgAggregateFilter!]
  or: [OrgMemberAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrgType
  neq: OrgType
  gt: OrgType
  gte: OrgType
  lt: OrgType
  lte: OrgType
  like: OrgType
  notLike: OrgType
  iLike: OrgType
  notILike: OrgType
  in: [OrgType!]
  notIn: [OrgType!]
}

input OrgStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrgStatus
  neq: OrgStatus
  gt: OrgStatus
  gte: OrgStatus
  lt: OrgStatus
  lte: OrgStatus
  like: OrgStatus
  notLike: OrgStatus
  iLike: OrgStatus
  notILike: OrgStatus
  in: [OrgStatus!]
  notIn: [OrgStatus!]
}

input OrgMemberAggregateFilterAccountAggregateFilter {
  and: [OrgMemberAggregateFilterAccountAggregateFilter!]
  or: [OrgMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchAggregateFilter {
  and: [OrgBranchAggregateFilter!]
  or: [OrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgBranchAggregateFilterOrgAggregateFilter
  members: OrgBranchAggregateFilterOrgBranchMemberAggregateFilter
}

input OrgBranchAggregateFilterOrgAggregateFilter {
  and: [OrgBranchAggregateFilterOrgAggregateFilter!]
  or: [OrgBranchAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchAggregateFilterOrgBranchMemberAggregateFilter {
  and: [OrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  or: [OrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopAggregateFilter {
  and: [ShopAggregateFilter!]
  or: [ShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ShopAggregateFilterOrgBranchAggregateFilter
  org: ShopAggregateFilterOrgAggregateFilter
  members: ShopAggregateFilterShopMemberAggregateFilter
}

input ShopAggregateFilterOrgBranchAggregateFilter {
  and: [ShopAggregateFilterOrgBranchAggregateFilter!]
  or: [ShopAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopAggregateFilterOrgAggregateFilter {
  and: [ShopAggregateFilterOrgAggregateFilter!]
  or: [ShopAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopAggregateFilterShopMemberAggregateFilter {
  and: [ShopAggregateFilterShopMemberAggregateFilter!]
  or: [ShopAggregateFilterShopMemberAggregateFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgMemberFilter {
  and: [OrgMemberFilter!]
  or: [OrgMemberFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgMemberFilterOrgFilter
  account: OrgMemberFilterAccountFilter
}

input OrgMemberFilterOrgFilter {
  and: [OrgMemberFilterOrgFilter!]
  or: [OrgMemberFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgMemberFilterAccountFilter {
  and: [OrgMemberFilterAccountFilter!]
  or: [OrgMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgMemberSort {
  field: OrgMemberSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrgMemberSortFields {
  role
  enabled
  id
  createdAt
  updatedAt
  deletedAt
}

input OrgBranchFilter {
  and: [OrgBranchFilter!]
  or: [OrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgBranchFilterOrgFilter
  members: OrgBranchFilterOrgBranchMemberFilter
}

input OrgBranchFilterOrgFilter {
  and: [OrgBranchFilterOrgFilter!]
  or: [OrgBranchFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchFilterOrgBranchMemberFilter {
  and: [OrgBranchFilterOrgBranchMemberFilter!]
  or: [OrgBranchFilterOrgBranchMemberFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgBranchSort {
  field: OrgBranchSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrgBranchSortFields {
  name
  phone_number
  details
  status
  id
  createdAt
  updatedAt
  deletedAt
}

input ShopFilter {
  and: [ShopFilter!]
  or: [ShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ShopFilterOrgBranchFilter
  org: ShopFilterOrgFilter
  members: ShopFilterShopMemberFilter
}

input ShopFilterOrgBranchFilter {
  and: [ShopFilterOrgBranchFilter!]
  or: [ShopFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopFilterOrgFilter {
  and: [ShopFilterOrgFilter!]
  or: [ShopFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopFilterShopMemberFilter {
  and: [ShopFilterShopMemberFilter!]
  or: [ShopFilterShopMemberFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShopSort {
  field: ShopSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ShopSortFields {
  name
  details
  enabled
  id
  createdAt
  updatedAt
  deletedAt
}

type OrgMember {
  role: OrgRole!
  enabled: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  account: Account!
  org: Org!
}

type OrgMemberDeleteResponse {
  role: OrgRole
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMemberEdge {
  """The node containing the OrgMember"""
  node: OrgMember!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrgMemberConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrgMemberEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgMemberAggregateGroupBy {
  role: OrgRole
  enabled: Boolean
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrgMemberCountAggregate {
  role: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgMemberSumAggregate {
  role: Float
}

type OrgMemberAvgAggregate {
  role: Float
}

type OrgMemberMinAggregate {
  role: OrgRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMemberMaxAggregate {
  role: OrgRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMemberAggregateResponse {
  groupBy: OrgMemberAggregateGroupBy
  count: OrgMemberCountAggregate
  sum: OrgMemberSumAggregate
  avg: OrgMemberAvgAggregate
  min: OrgMemberMinAggregate
  max: OrgMemberMaxAggregate
}

type OrgBranchMemberDeleteResponse {
  role: OrgBranchRole
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMemberEdge {
  """The node containing the OrgBranchMember"""
  node: OrgBranchMember!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrgBranchMemberConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrgBranchMemberEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgBranchMemberAggregateGroupBy {
  role: OrgBranchRole
  enabled: Boolean
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrgBranchMemberCountAggregate {
  role: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgBranchMemberSumAggregate {
  role: Float
}

type OrgBranchMemberAvgAggregate {
  role: Float
}

type OrgBranchMemberMinAggregate {
  role: OrgBranchRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMemberMaxAggregate {
  role: OrgBranchRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMemberAggregateResponse {
  groupBy: OrgBranchMemberAggregateGroupBy
  count: OrgBranchMemberCountAggregate
  sum: OrgBranchMemberSumAggregate
  avg: OrgBranchMemberAvgAggregate
  min: OrgBranchMemberMinAggregate
  max: OrgBranchMemberMaxAggregate
}

type OrgBranchDeleteResponse {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchEdge {
  """The node containing the OrgBranch"""
  node: OrgBranch!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrgBranchConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrgBranchEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgBranchAggregateGroupBy {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrgBranchCountAggregate {
  name: Int
  phone_number: Int
  details: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgBranchMinAggregate {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMaxAggregate {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchAggregateResponse {
  groupBy: OrgBranchAggregateGroupBy
  count: OrgBranchCountAggregate
  min: OrgBranchMinAggregate
  max: OrgBranchMaxAggregate
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type OrgBranchMembersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [OrgBranchMember!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgBranchMembersAggregateGroupBy {
  role: OrgBranchRole
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMembersCountAggregate {
  role: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgBranchMembersSumAggregate {
  role: Float
}

type OrgBranchMembersAvgAggregate {
  role: Float
}

type OrgBranchMembersMinAggregate {
  role: OrgBranchRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMembersMaxAggregate {
  role: OrgBranchRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchMembersAggregateResponse {
  groupBy: OrgBranchMembersAggregateGroupBy
  count: OrgBranchMembersCountAggregate
  sum: OrgBranchMembersSumAggregate
  avg: OrgBranchMembersAvgAggregate
  min: OrgBranchMembersMinAggregate
  max: OrgBranchMembersMaxAggregate
}

type OrgDeleteResponse {
  type: OrgType
  name: String
  details: JSON
  status: OrgStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgEdge {
  """The node containing the Org"""
  node: Org!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrgConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrgEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgAggregateGroupBy {
  type: OrgType
  name: String
  status: OrgStatus
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrgCountAggregate {
  type: Int
  name: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgSumAggregate {
  type: Float
}

type OrgAvgAggregate {
  type: Float
}

type OrgMinAggregate {
  type: OrgType
  name: String
  status: OrgStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMaxAggregate {
  type: OrgType
  name: String
  status: OrgStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgAggregateResponse {
  groupBy: OrgAggregateGroupBy
  count: OrgCountAggregate
  sum: OrgSumAggregate
  avg: OrgAvgAggregate
  min: OrgMinAggregate
  max: OrgMaxAggregate
}

type OrgShopsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Shop!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgBranchesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [OrgBranch!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgMembersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [OrgMember!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrgShopsAggregateGroupBy {
  name: String
  details: JSON
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgShopsCountAggregate {
  name: Int
  details: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgShopsMinAggregate {
  name: String
  details: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgShopsMaxAggregate {
  name: String
  details: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgShopsAggregateResponse {
  groupBy: OrgShopsAggregateGroupBy
  count: OrgShopsCountAggregate
  min: OrgShopsMinAggregate
  max: OrgShopsMaxAggregate
}

type OrgBranchesAggregateGroupBy {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchesCountAggregate {
  name: Int
  phone_number: Int
  details: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgBranchesMinAggregate {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchesMaxAggregate {
  name: String
  phone_number: String
  details: JSON
  status: OrgBranchStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgBranchesAggregateResponse {
  groupBy: OrgBranchesAggregateGroupBy
  count: OrgBranchesCountAggregate
  min: OrgBranchesMinAggregate
  max: OrgBranchesMaxAggregate
}

type OrgMembersAggregateGroupBy {
  role: OrgRole
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMembersCountAggregate {
  role: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrgMembersSumAggregate {
  role: Float
}

type OrgMembersAvgAggregate {
  role: Float
}

type OrgMembersMinAggregate {
  role: OrgRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMembersMaxAggregate {
  role: OrgRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrgMembersAggregateResponse {
  groupBy: OrgMembersAggregateGroupBy
  count: OrgMembersCountAggregate
  sum: OrgMembersSumAggregate
  avg: OrgMembersAvgAggregate
  min: OrgMembersMinAggregate
  max: OrgMembersMaxAggregate
}

type Customer {
  phone: String!
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  addressesAggregate(
    """Filter to find records to aggregate on"""
    filter: CustomerAddressAggregateFilter
  ): [CustomerAddressesAggregateResponse!]!
  addresses(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: CustomerAddressFilter! = {}

    """Specify to sort results."""
    sorting: [CustomerAddressSort!]! = []
  ): CustomerAddressesConnection
}

enum CustomerGender {
  MALE
  FEMALE
  UNKNOWN
}

input CustomerAddressAggregateFilter {
  and: [CustomerAddressAggregateFilter!]
  or: [CustomerAddressAggregateFilter!]
  full: StringFieldComparison
  distanceKm: NumberFieldComparison
  city: StringFieldComparison
  district: StringFieldComparison
  ward: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  customer: CustomerAddressAggregateFilterCustomerAggregateFilter
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input CustomerAddressAggregateFilterCustomerAggregateFilter {
  and: [CustomerAddressAggregateFilterCustomerAggregateFilter!]
  or: [CustomerAddressAggregateFilterCustomerAggregateFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CustomerGenderFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: CustomerGender
  neq: CustomerGender
  gt: CustomerGender
  gte: CustomerGender
  lt: CustomerGender
  lte: CustomerGender
  like: CustomerGender
  notLike: CustomerGender
  iLike: CustomerGender
  notILike: CustomerGender
  in: [CustomerGender!]
  notIn: [CustomerGender!]
}

input CustomerAddressFilter {
  and: [CustomerAddressFilter!]
  or: [CustomerAddressFilter!]
  full: StringFieldComparison
  distanceKm: NumberFieldComparison
  city: StringFieldComparison
  district: StringFieldComparison
  ward: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  customer: CustomerAddressFilterCustomerFilter
}

input CustomerAddressFilterCustomerFilter {
  and: [CustomerAddressFilterCustomerFilter!]
  or: [CustomerAddressFilterCustomerFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CustomerAddressSort {
  field: CustomerAddressSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CustomerAddressSortFields {
  full
  distanceKm
  city
  district
  ward
  id
  createdAt
  updatedAt
  deletedAt
}

type CustomerAddress {
  full: String
  distanceKm: Float
  city: String
  district: String
  ward: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerDeleteResponse {
  phone: String
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerEdge {
  """The node containing the Customer"""
  node: Customer!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type CustomerConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [CustomerEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CustomerAggregateGroupBy {
  phone: String
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type CustomerCountAggregate {
  phone: Int
  email: Int
  firstName: Int
  lastName: Int
  gender: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type CustomerSumAggregate {
  gender: Float
}

type CustomerAvgAggregate {
  gender: Float
}

type CustomerMinAggregate {
  phone: String
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerMaxAggregate {
  phone: String
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerAggregateResponse {
  groupBy: CustomerAggregateGroupBy
  count: CustomerCountAggregate
  sum: CustomerSumAggregate
  avg: CustomerAvgAggregate
  min: CustomerMinAggregate
  max: CustomerMaxAggregate
}

type CustomerAddressesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [CustomerAddress!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CustomerAddressesAggregateGroupBy {
  full: String
  distanceKm: Float
  city: String
  district: String
  ward: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerAddressesCountAggregate {
  full: Int
  distanceKm: Int
  city: Int
  district: Int
  ward: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type CustomerAddressesSumAggregate {
  distanceKm: Float
}

type CustomerAddressesAvgAggregate {
  distanceKm: Float
}

type CustomerAddressesMinAggregate {
  full: String
  distanceKm: Float
  city: String
  district: String
  ward: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerAddressesMaxAggregate {
  full: String
  distanceKm: Float
  city: String
  district: String
  ward: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CustomerAddressesAggregateResponse {
  groupBy: CustomerAddressesAggregateGroupBy
  count: CustomerAddressesCountAggregate
  sum: CustomerAddressesSumAggregate
  avg: CustomerAddressesAvgAggregate
  min: CustomerAddressesMinAggregate
  max: CustomerAddressesMaxAggregate
}

type Garage {
  name: String!
  description: String
  phone_number: String
  gplace_id: String
  addressStreetAndNo: String
  addressWard: String
  addressDistrict: String
  addressCity: String
  addressCoutry: String
  addressPostalCode: String
  addressFull: String
  lat: Float
  lng: Float
  logo: String
  media: [String!]
  status: GarageStatus
  metadata: JSON
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  org: Org!
  branch: OrgBranch!
}

enum GarageStatus {
  ACTIVATED
  UNACTIVATED
  BLOCKED
}

type GarageDeleteResponse {
  name: String
  description: String
  phone_number: String
  gplace_id: String
  addressStreetAndNo: String
  addressWard: String
  addressDistrict: String
  addressCity: String
  addressCoutry: String
  addressPostalCode: String
  addressFull: String
  lat: Float
  lng: Float
  logo: String
  media: [String!]
  status: GarageStatus
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type GarageEdge {
  """The node containing the Garage"""
  node: Garage!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type GarageConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [GarageEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type GarageAggregateGroupBy {
  name: String
  phone_number: String
  gplace_id: String
  lat: Float
  lng: Float
  status: GarageStatus
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type GarageCountAggregate {
  name: Int
  phone_number: Int
  gplace_id: Int
  lat: Int
  lng: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type GarageSumAggregate {
  lat: Float
  lng: Float
  id: Float
}

type GarageAvgAggregate {
  lat: Float
  lng: Float
  id: Float
}

type GarageMinAggregate {
  name: String
  phone_number: String
  gplace_id: String
  lat: Float
  lng: Float
  status: GarageStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type GarageMaxAggregate {
  name: String
  phone_number: String
  gplace_id: String
  lat: Float
  lng: Float
  status: GarageStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type GarageAggregateResponse {
  groupBy: GarageAggregateGroupBy
  count: GarageCountAggregate
  sum: GarageSumAggregate
  avg: GarageAvgAggregate
  min: GarageMinAggregate
  max: GarageMaxAggregate
}

type ProductType {
  sku: String
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductTypeProductsAggregateResponse!]!
  branch: OrgBranch!
  products(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductTypeProductsConnection
}

input ProductAggregateFilter {
  and: [ProductAggregateFilter!]
  or: [ProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  unit: ProductAggregateFilterProductUnitAggregateFilter
  type: ProductAggregateFilterProductTypeAggregateFilter
  branch: ProductAggregateFilterOrgBranchAggregateFilter
  optionGroups: ProductAggregateFilterProductOptionGroupAggregateFilter
  categories: ProductAggregateFilterProductCategoryAggregateFilter
}

input ProductAggregateFilterProductUnitAggregateFilter {
  and: [ProductAggregateFilterProductUnitAggregateFilter!]
  or: [ProductAggregateFilterProductUnitAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductAggregateFilterProductTypeAggregateFilter {
  and: [ProductAggregateFilterProductTypeAggregateFilter!]
  or: [ProductAggregateFilterProductTypeAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductAggregateFilterOrgBranchAggregateFilter {
  and: [ProductAggregateFilterOrgBranchAggregateFilter!]
  or: [ProductAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductAggregateFilterProductOptionGroupAggregateFilter {
  and: [ProductAggregateFilterProductOptionGroupAggregateFilter!]
  or: [ProductAggregateFilterProductOptionGroupAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductAggregateFilterProductCategoryAggregateFilter {
  and: [ProductAggregateFilterProductCategoryAggregateFilter!]
  or: [ProductAggregateFilterProductCategoryAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductFilter {
  and: [ProductFilter!]
  or: [ProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  unit: ProductFilterProductUnitFilter
  type: ProductFilterProductTypeFilter
  branch: ProductFilterOrgBranchFilter
  optionGroups: ProductFilterProductOptionGroupFilter
  categories: ProductFilterProductCategoryFilter
}

input ProductFilterProductUnitFilter {
  and: [ProductFilterProductUnitFilter!]
  or: [ProductFilterProductUnitFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductFilterProductTypeFilter {
  and: [ProductFilterProductTypeFilter!]
  or: [ProductFilterProductTypeFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductFilterOrgBranchFilter {
  and: [ProductFilterOrgBranchFilter!]
  or: [ProductFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductFilterProductOptionGroupFilter {
  and: [ProductFilterProductOptionGroupFilter!]
  or: [ProductFilterProductOptionGroupFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductFilterProductCategoryFilter {
  and: [ProductFilterProductCategoryFilter!]
  or: [ProductFilterProductCategoryFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductSort {
  field: ProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductSortFields {
  sku
  name
  price
  enabled
  id
  createdAt
  updatedAt
  deletedAt
}

type ProductCategory {
  sku: String
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductCategoryProductsAggregateResponse!]!
  branch: OrgBranch!
  products(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductCategoryProductsConnection
}

type ProductUnit {
  sku: String
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductUnitProductsAggregateResponse!]!
  branch: OrgBranch!
  products(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductUnitProductsConnection
}

type ProductOption {
  sku: String
  name: String!
  diffPrice: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  group: ProductOptionGroup!
}

type ProductOptionGroup {
  sku: String
  name: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  productsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductOptionGroupProductsAggregateResponse!]!
  optionsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductOptionAggregateFilter
  ): [ProductOptionGroupOptionsAggregateResponse!]!
  products(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductOptionGroupProductsConnection
  options(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionFilter! = {}

    """Specify to sort results."""
    sorting: [ProductOptionSort!]! = []
  ): ProductOptionGroupOptionsConnection
}

input ProductOptionAggregateFilter {
  and: [ProductOptionAggregateFilter!]
  or: [ProductOptionAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  group: ProductOptionAggregateFilterProductOptionGroupAggregateFilter
}

input ProductOptionAggregateFilterProductOptionGroupAggregateFilter {
  and: [ProductOptionAggregateFilterProductOptionGroupAggregateFilter!]
  or: [ProductOptionAggregateFilterProductOptionGroupAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionFilter {
  and: [ProductOptionFilter!]
  or: [ProductOptionFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  group: ProductOptionFilterProductOptionGroupFilter
}

input ProductOptionFilterProductOptionGroupFilter {
  and: [ProductOptionFilterProductOptionGroupFilter!]
  or: [ProductOptionFilterProductOptionGroupFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionSort {
  field: ProductOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductOptionSortFields {
  sku
  name
  diffPrice
  id
  createdAt
  updatedAt
  deletedAt
}

type Product {
  sku: String
  image: String
  name: String!
  price: Float!
  description: String
  enabled: Boolean
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  categoriesAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductCategoryAggregateFilter
  ): [ProductCategoriesAggregateResponse!]!
  optionGroupsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductOptionGroupAggregateFilter
  ): [ProductOptionGroupsAggregateResponse!]!
  branch: OrgBranch!
  type: ProductType!
  unit: ProductUnit!
  categories(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductCategoryFilter! = {}

    """Specify to sort results."""
    sorting: [ProductCategorySort!]! = []
  ): ProductCategoriesConnection!
  optionGroups(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionGroupFilter! = {}

    """Specify to sort results."""
    sorting: [ProductOptionGroupSort!]! = []
  ): ProductOptionGroupsConnection!
}

input ProductCategoryAggregateFilter {
  and: [ProductCategoryAggregateFilter!]
  or: [ProductCategoryAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductCategoryAggregateFilterOrgBranchAggregateFilter
  products: ProductCategoryAggregateFilterProductAggregateFilter
}

input ProductCategoryAggregateFilterOrgBranchAggregateFilter {
  and: [ProductCategoryAggregateFilterOrgBranchAggregateFilter!]
  or: [ProductCategoryAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductCategoryAggregateFilterProductAggregateFilter {
  and: [ProductCategoryAggregateFilterProductAggregateFilter!]
  or: [ProductCategoryAggregateFilterProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionGroupAggregateFilter {
  and: [ProductOptionGroupAggregateFilter!]
  or: [ProductOptionGroupAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  options: ProductOptionGroupAggregateFilterProductOptionAggregateFilter
  products: ProductOptionGroupAggregateFilterProductAggregateFilter
}

input ProductOptionGroupAggregateFilterProductOptionAggregateFilter {
  and: [ProductOptionGroupAggregateFilterProductOptionAggregateFilter!]
  or: [ProductOptionGroupAggregateFilterProductOptionAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionGroupAggregateFilterProductAggregateFilter {
  and: [ProductOptionGroupAggregateFilterProductAggregateFilter!]
  or: [ProductOptionGroupAggregateFilterProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductCategoryFilter {
  and: [ProductCategoryFilter!]
  or: [ProductCategoryFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductCategoryFilterOrgBranchFilter
  products: ProductCategoryFilterProductFilter
}

input ProductCategoryFilterOrgBranchFilter {
  and: [ProductCategoryFilterOrgBranchFilter!]
  or: [ProductCategoryFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductCategoryFilterProductFilter {
  and: [ProductCategoryFilterProductFilter!]
  or: [ProductCategoryFilterProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductCategorySort {
  field: ProductCategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductCategorySortFields {
  sku
  name
  id
  createdAt
  updatedAt
  deletedAt
}

input ProductOptionGroupFilter {
  and: [ProductOptionGroupFilter!]
  or: [ProductOptionGroupFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  options: ProductOptionGroupFilterProductOptionFilter
  products: ProductOptionGroupFilterProductFilter
}

input ProductOptionGroupFilterProductOptionFilter {
  and: [ProductOptionGroupFilterProductOptionFilter!]
  or: [ProductOptionGroupFilterProductOptionFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionGroupFilterProductFilter {
  and: [ProductOptionGroupFilterProductFilter!]
  or: [ProductOptionGroupFilterProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductOptionGroupSort {
  field: ProductOptionGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductOptionGroupSortFields {
  sku
  name
  id
  createdAt
  updatedAt
  deletedAt
}

type Order {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float!
  note: String
  shippingAddressStreetAndNo: String
  shippingAddressWard: String
  shippingAddressDistrict: String
  shippingAddressCity: String
  shippingAddressCoutry: String
  shippingAddressPostalCode: String
  shippingAddressFull: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  branch: OrgBranch!
  customer: Customer!
}

type OrderProduct {
  quantity: Float!
  grossPrice: Float
  discountPrice: Float
  netPrice: Float!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  optionsAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductOptionAggregateFilter
  ): [OrderProductOptionsAggregateResponse!]!
  product: Product!
  order: Order!
  options(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionFilter! = {}

    """Specify to sort results."""
    sorting: [ProductOptionSort!]! = []
  ): OrderProductOptionsConnection!
}

type OrderProductDeleteResponse {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductEdge {
  """The node containing the OrderProduct"""
  node: OrderProduct!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderProductConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderProductEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderProductAggregateGroupBy {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrderProductCountAggregate {
  quantity: Int
  grossPrice: Int
  discountPrice: Int
  netPrice: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrderProductSumAggregate {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
}

type OrderProductAvgAggregate {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
}

type OrderProductMinAggregate {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductMaxAggregate {
  quantity: Float
  grossPrice: Float
  discountPrice: Float
  netPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductAggregateResponse {
  groupBy: OrderProductAggregateGroupBy
  count: OrderProductCountAggregate
  sum: OrderProductSumAggregate
  avg: OrderProductAvgAggregate
  min: OrderProductMinAggregate
  max: OrderProductMaxAggregate
}

type OrderProductOptionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ProductOption!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderProductOptionsAggregateGroupBy {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductOptionsCountAggregate {
  sku: Int
  name: Int
  diffPrice: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrderProductOptionsSumAggregate {
  diffPrice: Float
}

type OrderProductOptionsAvgAggregate {
  diffPrice: Float
}

type OrderProductOptionsMinAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductOptionsMaxAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderProductOptionsAggregateResponse {
  groupBy: OrderProductOptionsAggregateGroupBy
  count: OrderProductOptionsCountAggregate
  sum: OrderProductOptionsSumAggregate
  avg: OrderProductOptionsAvgAggregate
  min: OrderProductOptionsMinAggregate
  max: OrderProductOptionsMaxAggregate
}

type OrderDeleteResponse {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
  note: String
  shippingAddressStreetAndNo: String
  shippingAddressWard: String
  shippingAddressDistrict: String
  shippingAddressCity: String
  shippingAddressCoutry: String
  shippingAddressPostalCode: String
  shippingAddressFull: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type OrderAggregateGroupBy {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type OrderCountAggregate {
  refId: Int
  grossPrice: Int
  discountPrice: Int
  commissionPercent: Int
  commissionPrice: Int
  netPrice: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type OrderSumAggregate {
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
}

type OrderAvgAggregate {
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
}

type OrderMinAggregate {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderMaxAggregate {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type ProductCategoryDeleteResponse {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryEdge {
  """The node containing the ProductCategory"""
  node: ProductCategory!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductCategoryConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductCategoryEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductCategoryAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductCategoryCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductCategoryMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryAggregateResponse {
  groupBy: ProductCategoryAggregateGroupBy
  count: ProductCategoryCountAggregate
  min: ProductCategoryMinAggregate
  max: ProductCategoryMaxAggregate
}

type ProductCategoryProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductCategoryProductsAggregateGroupBy {
  sku: String
  name: String
  price: Float
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryProductsCountAggregate {
  sku: Int
  name: Int
  price: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductCategoryProductsSumAggregate {
  price: Float
}

type ProductCategoryProductsAvgAggregate {
  price: Float
}

type ProductCategoryProductsMinAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryProductsMaxAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoryProductsAggregateResponse {
  groupBy: ProductCategoryProductsAggregateGroupBy
  count: ProductCategoryProductsCountAggregate
  sum: ProductCategoryProductsSumAggregate
  avg: ProductCategoryProductsAvgAggregate
  min: ProductCategoryProductsMinAggregate
  max: ProductCategoryProductsMaxAggregate
}

type ProductOptionGroupDeleteResponse {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupEdge {
  """The node containing the ProductOptionGroup"""
  node: ProductOptionGroup!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductOptionGroupConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductOptionGroupEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductOptionGroupAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductOptionGroupCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductOptionGroupMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupAggregateResponse {
  groupBy: ProductOptionGroupAggregateGroupBy
  count: ProductOptionGroupCountAggregate
  min: ProductOptionGroupMinAggregate
  max: ProductOptionGroupMaxAggregate
}

type ProductOptionGroupOptionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ProductOption!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductOptionGroupProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductOptionGroupOptionsAggregateGroupBy {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupOptionsCountAggregate {
  sku: Int
  name: Int
  diffPrice: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductOptionGroupOptionsSumAggregate {
  diffPrice: Float
}

type ProductOptionGroupOptionsAvgAggregate {
  diffPrice: Float
}

type ProductOptionGroupOptionsMinAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupOptionsMaxAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupOptionsAggregateResponse {
  groupBy: ProductOptionGroupOptionsAggregateGroupBy
  count: ProductOptionGroupOptionsCountAggregate
  sum: ProductOptionGroupOptionsSumAggregate
  avg: ProductOptionGroupOptionsAvgAggregate
  min: ProductOptionGroupOptionsMinAggregate
  max: ProductOptionGroupOptionsMaxAggregate
}

type ProductOptionGroupProductsAggregateGroupBy {
  sku: String
  name: String
  price: Float
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupProductsCountAggregate {
  sku: Int
  name: Int
  price: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductOptionGroupProductsSumAggregate {
  price: Float
}

type ProductOptionGroupProductsAvgAggregate {
  price: Float
}

type ProductOptionGroupProductsMinAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupProductsMaxAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupProductsAggregateResponse {
  groupBy: ProductOptionGroupProductsAggregateGroupBy
  count: ProductOptionGroupProductsCountAggregate
  sum: ProductOptionGroupProductsSumAggregate
  avg: ProductOptionGroupProductsAvgAggregate
  min: ProductOptionGroupProductsMinAggregate
  max: ProductOptionGroupProductsMaxAggregate
}

type ProductOptionDeleteResponse {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionEdge {
  """The node containing the ProductOption"""
  node: ProductOption!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductOptionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductOptionEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductOptionAggregateGroupBy {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductOptionCountAggregate {
  sku: Int
  name: Int
  diffPrice: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductOptionSumAggregate {
  diffPrice: Float
}

type ProductOptionAvgAggregate {
  diffPrice: Float
}

type ProductOptionMinAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionMaxAggregate {
  sku: String
  name: String
  diffPrice: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionAggregateResponse {
  groupBy: ProductOptionAggregateGroupBy
  count: ProductOptionCountAggregate
  sum: ProductOptionSumAggregate
  avg: ProductOptionAvgAggregate
  min: ProductOptionMinAggregate
  max: ProductOptionMaxAggregate
}

type ProductTypeDeleteResponse {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeEdge {
  """The node containing the ProductType"""
  node: ProductType!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductTypeConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductTypeEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductTypeAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductTypeCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductTypeMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeAggregateResponse {
  groupBy: ProductTypeAggregateGroupBy
  count: ProductTypeCountAggregate
  min: ProductTypeMinAggregate
  max: ProductTypeMaxAggregate
}

type ProductTypeProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductTypeProductsAggregateGroupBy {
  sku: String
  name: String
  price: Float
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeProductsCountAggregate {
  sku: Int
  name: Int
  price: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductTypeProductsSumAggregate {
  price: Float
}

type ProductTypeProductsAvgAggregate {
  price: Float
}

type ProductTypeProductsMinAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeProductsMaxAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductTypeProductsAggregateResponse {
  groupBy: ProductTypeProductsAggregateGroupBy
  count: ProductTypeProductsCountAggregate
  sum: ProductTypeProductsSumAggregate
  avg: ProductTypeProductsAvgAggregate
  min: ProductTypeProductsMinAggregate
  max: ProductTypeProductsMaxAggregate
}

type ProductUnitDeleteResponse {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitEdge {
  """The node containing the ProductUnit"""
  node: ProductUnit!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductUnitConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductUnitEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductUnitAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductUnitCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductUnitMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitAggregateResponse {
  groupBy: ProductUnitAggregateGroupBy
  count: ProductUnitCountAggregate
  min: ProductUnitMinAggregate
  max: ProductUnitMaxAggregate
}

type ProductUnitProductsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductUnitProductsAggregateGroupBy {
  sku: String
  name: String
  price: Float
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitProductsCountAggregate {
  sku: Int
  name: Int
  price: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductUnitProductsSumAggregate {
  price: Float
}

type ProductUnitProductsAvgAggregate {
  price: Float
}

type ProductUnitProductsMinAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitProductsMaxAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductUnitProductsAggregateResponse {
  groupBy: ProductUnitProductsAggregateGroupBy
  count: ProductUnitProductsCountAggregate
  sum: ProductUnitProductsSumAggregate
  avg: ProductUnitProductsAvgAggregate
  min: ProductUnitProductsMinAggregate
  max: ProductUnitProductsMaxAggregate
}

type ProductDeleteResponse {
  sku: String
  image: String
  name: String
  price: Float
  description: String
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductEdge {
  """The node containing the Product"""
  node: Product!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ProductConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProductEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductAggregateGroupBy {
  sku: String
  name: String
  price: Float
  enabled: Boolean
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ProductCountAggregate {
  sku: Int
  name: Int
  price: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductSumAggregate {
  price: Float
}

type ProductAvgAggregate {
  price: Float
}

type ProductMinAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductMaxAggregate {
  sku: String
  name: String
  price: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductAggregateResponse {
  groupBy: ProductAggregateGroupBy
  count: ProductCountAggregate
  sum: ProductSumAggregate
  avg: ProductAvgAggregate
  min: ProductMinAggregate
  max: ProductMaxAggregate
}

type ProductOptionGroupsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ProductOptionGroup!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductCategoriesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ProductCategory!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductOptionGroupsAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupsCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductOptionGroupsMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupsMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductOptionGroupsAggregateResponse {
  groupBy: ProductOptionGroupsAggregateGroupBy
  count: ProductOptionGroupsCountAggregate
  min: ProductOptionGroupsMinAggregate
  max: ProductOptionGroupsMaxAggregate
}

type ProductCategoriesAggregateGroupBy {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoriesCountAggregate {
  sku: Int
  name: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ProductCategoriesMinAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoriesMaxAggregate {
  sku: String
  name: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProductCategoriesAggregateResponse {
  groupBy: ProductCategoriesAggregateGroupBy
  count: ProductCategoriesCountAggregate
  min: ProductCategoriesMinAggregate
  max: ProductCategoriesMaxAggregate
}

type ShopMemberDeleteResponse {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMemberEdge {
  """The node containing the ShopMember"""
  node: ShopMember!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ShopMemberConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ShopMemberEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShopMemberAggregateGroupBy {
  role: ShopMemberRole
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ShopMemberCountAggregate {
  role: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShopMemberSumAggregate {
  role: Float
}

type ShopMemberAvgAggregate {
  role: Float
}

type ShopMemberMinAggregate {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMemberMaxAggregate {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMemberAggregateResponse {
  groupBy: ShopMemberAggregateGroupBy
  count: ShopMemberCountAggregate
  sum: ShopMemberSumAggregate
  avg: ShopMemberAvgAggregate
  min: ShopMemberMinAggregate
  max: ShopMemberMaxAggregate
}

type ShopDeleteResponse {
  name: String
  details: JSON
  enabled: Boolean
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopEdge {
  """The node containing the Shop"""
  node: Shop!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ShopConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ShopEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShopAggregateGroupBy {
  name: String
  details: JSON
  enabled: Boolean
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ShopCountAggregate {
  name: Int
  details: Int
  enabled: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShopMinAggregate {
  name: String
  details: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMaxAggregate {
  name: String
  details: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopAggregateResponse {
  groupBy: ShopAggregateGroupBy
  count: ShopCountAggregate
  min: ShopMinAggregate
  max: ShopMaxAggregate
}

type ShopMembersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ShopMember!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShopMembersAggregateGroupBy {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMembersCountAggregate {
  role: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShopMembersSumAggregate {
  role: Float
}

type ShopMembersAvgAggregate {
  role: Float
}

type ShopMembersMinAggregate {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMembersMaxAggregate {
  role: ShopMemberRole
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShopMembersAggregateResponse {
  groupBy: ShopMembersAggregateGroupBy
  count: ShopMembersCountAggregate
  sum: ShopMembersSumAggregate
  avg: ShopMembersAvgAggregate
  min: ShopMembersMinAggregate
  max: ShopMembersMaxAggregate
}

type UserVehicleDeleteResponse {
  name: String
  customModel: String
  picture: String
  status: UserVechileStatus
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehicleEdge {
  """The node containing the UserVehicle"""
  node: UserVehicle!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserVehicleConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [UserVehicleEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserVehicleAggregateGroupBy {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type UserVehicleCountAggregate {
  name: Int
  customModel: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type UserVehicleMinAggregate {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehicleMaxAggregate {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehicleAggregateResponse {
  groupBy: UserVehicleAggregateGroupBy
  count: UserVehicleCountAggregate
  min: UserVehicleMinAggregate
  max: UserVehicleMaxAggregate
}

type UserDeleteResponse {
  phone_number: String
  avatar: String
  status: UserStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [UserEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  phone_number: String
  status: UserStatus
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type UserCountAggregate {
  phone_number: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type UserMinAggregate {
  phone_number: String
  status: UserStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserMaxAggregate {
  phone_number: String
  status: UserStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type UserVehiclesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserVehicle!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserVehiclesAggregateGroupBy {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehiclesCountAggregate {
  name: Int
  customModel: Int
  status: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type UserVehiclesMinAggregate {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehiclesMaxAggregate {
  name: String
  customModel: String
  status: UserVechileStatus
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserVehiclesAggregateResponse {
  groupBy: UserVehiclesAggregateGroupBy
  count: UserVehiclesCountAggregate
  min: UserVehiclesMinAggregate
  max: UserVehiclesMaxAggregate
}

type VehicleBodyDeleteResponse {
  name: String
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleBodyEdge {
  """The node containing the VehicleBody"""
  node: VehicleBody!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleBodyConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleBodyEdge!]!
}

type VehicleBrandDeleteResponse {
  name: String
  startYear: Int
  endYear: Int
  logo: String
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleBrandEdge {
  """The node containing the VehicleBrand"""
  node: VehicleBrand!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleBrandConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleBrandEdge!]!
}

type VehicleEngineDeleteResponse {
  name: String
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleEngineEdge {
  """The node containing the VehicleEngine"""
  node: VehicleEngine!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleEngineConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleEngineEdge!]!
}

type VehicleModelBodyDeleteResponse {
  picture: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleModelBodyEdge {
  """The node containing the VehicleModelBody"""
  node: VehicleModelBody!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleModelBodyConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleModelBodyEdge!]!
}

type VehicleModelDeleteResponse {
  name: String
  startYear: Int
  metadata: JSON
  id: ID
  endYear: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleModelEdge {
  """The node containing the VehicleModel"""
  node: VehicleModel!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleModelConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleModelEdge!]!
}

type VehicleTransmissionDeleteResponse {
  name: String
  metadata: JSON
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type VehicleTransmissionEdge {
  """The node containing the VehicleTransmission"""
  node: VehicleTransmission!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type VehicleTransmissionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [VehicleTransmissionEdge!]!
}

type ServiceLog {
  type: ServiceLogType!
  description: String
  date: DateTime
  mileage: Float
  media: [String!]
  customGarage: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  billsAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceLogBillAggregateFilter
  ): [ServiceLogBillsAggregateResponse!]!
  garage: Garage
  vehicle: UserVehicle!
  bills(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: ServiceLogBillFilter! = {}

    """Specify to sort results."""
    sorting: [ServiceLogBillSort!]! = []
  ): ServiceLogBillsConnection
}

enum ServiceLogType {
  MAINTENANCE
  REPAIR
  DETAILING
  RETROFIT
  TUNING
  SOFTWARE
  PAPERWORK
  OTHER
}

input ServiceLogBillAggregateFilter {
  and: [ServiceLogBillAggregateFilter!]
  or: [ServiceLogBillAggregateFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  log: ServiceLogBillAggregateFilterServiceLogAggregateFilter
}

input ServiceLogBillAggregateFilterServiceLogAggregateFilter {
  and: [ServiceLogBillAggregateFilterServiceLogAggregateFilter!]
  or: [ServiceLogBillAggregateFilterServiceLogAggregateFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ServiceLogType
  neq: ServiceLogType
  gt: ServiceLogType
  gte: ServiceLogType
  lt: ServiceLogType
  lte: ServiceLogType
  like: ServiceLogType
  notLike: ServiceLogType
  iLike: ServiceLogType
  notILike: ServiceLogType
  in: [ServiceLogType!]
  notIn: [ServiceLogType!]
}

input ServiceLogBillFilter {
  and: [ServiceLogBillFilter!]
  or: [ServiceLogBillFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  log: ServiceLogBillFilterServiceLogFilter
}

input ServiceLogBillFilterServiceLogFilter {
  and: [ServiceLogBillFilterServiceLogFilter!]
  or: [ServiceLogBillFilterServiceLogFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogBillSort {
  field: ServiceLogBillSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceLogBillSortFields {
  total
  id
  createdAt
  updatedAt
  deletedAt
}

type ServiceLogBill {
  total: Float!
  media: [String!]
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  log: ServiceLog!
}

type ServiceLogBillDeleteResponse {
  total: Float
  media: [String!]
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillEdge {
  """The node containing the ServiceLogBill"""
  node: ServiceLogBill!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ServiceLogBillConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ServiceLogBillEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceLogBillAggregateGroupBy {
  total: Float
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ServiceLogBillCountAggregate {
  total: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ServiceLogBillSumAggregate {
  total: Float
}

type ServiceLogBillAvgAggregate {
  total: Float
}

type ServiceLogBillMinAggregate {
  total: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillMaxAggregate {
  total: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillAggregateResponse {
  groupBy: ServiceLogBillAggregateGroupBy
  count: ServiceLogBillCountAggregate
  sum: ServiceLogBillSumAggregate
  avg: ServiceLogBillAvgAggregate
  min: ServiceLogBillMinAggregate
  max: ServiceLogBillMaxAggregate
}

type ServiceLogDeleteResponse {
  type: ServiceLogType
  description: String
  date: DateTime
  mileage: Float
  media: [String!]
  customGarage: String
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogEdge {
  """The node containing the ServiceLog"""
  node: ServiceLog!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type ServiceLogConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ServiceLogEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceLogAggregateGroupBy {
  type: ServiceLogType
  description: String
  date(by: GroupBy! = DAY): DateTime
  id: ID
  createdAt(by: GroupBy! = DAY): DateTime
  updatedAt(by: GroupBy! = DAY): DateTime
  deletedAt(by: GroupBy! = DAY): DateTime
}

type ServiceLogCountAggregate {
  type: Int
  description: Int
  date: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ServiceLogSumAggregate {
  type: Float
}

type ServiceLogAvgAggregate {
  type: Float
}

type ServiceLogMinAggregate {
  type: ServiceLogType
  description: String
  date: DateTime
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogMaxAggregate {
  type: ServiceLogType
  description: String
  date: DateTime
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogAggregateResponse {
  groupBy: ServiceLogAggregateGroupBy
  count: ServiceLogCountAggregate
  sum: ServiceLogSumAggregate
  avg: ServiceLogAvgAggregate
  min: ServiceLogMinAggregate
  max: ServiceLogMaxAggregate
}

type ServiceLogBillsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ServiceLogBill!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ServiceLogBillsAggregateGroupBy {
  total: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillsCountAggregate {
  total: Int
  id: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ServiceLogBillsSumAggregate {
  total: Float
}

type ServiceLogBillsAvgAggregate {
  total: Float
}

type ServiceLogBillsMinAggregate {
  total: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillsMaxAggregate {
  total: Float
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ServiceLogBillsAggregateResponse {
  groupBy: ServiceLogBillsAggregateGroupBy
  count: ServiceLogBillsCountAggregate
  sum: ServiceLogBillsSumAggregate
  avg: ServiceLogBillsAvgAggregate
  min: ServiceLogBillsMinAggregate
  max: ServiceLogBillsMaxAggregate
}

type Query {
  accountAggregate(
    """Filter to find records to aggregate on"""
    filter: AccountAggregateFilter
  ): [AccountAggregateResponse!]!
  account(
    """The id of the record to find."""
    id: ID!
  ): Account!
  accounts(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: AccountFilter! = {}

    """Specify to sort results."""
    sorting: [AccountSort!]! = []
  ): AccountConnection!
  me: Account!
  accountVerficationAggregate(
    """Filter to find records to aggregate on"""
    filter: AccountVerficationAggregateFilter
  ): [AccountVerficationAggregateResponse!]!
  accountVerfication(
    """The id of the record to find."""
    id: ID!
  ): AccountVerfication!
  accountVerfications(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: AccountVerficationFilter! = {}

    """Specify to sort results."""
    sorting: [AccountVerficationSort!]! = []
  ): AccountVerficationConnection!
  accountPasswordResetAggregate(
    """Filter to find records to aggregate on"""
    filter: AccountPasswordResetAggregateFilter
  ): [AccountPasswordResetAggregateResponse!]!
  accountPasswordReset(
    """The id of the record to find."""
    id: ID!
  ): AccountPasswordReset!
  accountPasswordResets(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: AccountPasswordResetFilter! = {}

    """Specify to sort results."""
    sorting: [AccountPasswordResetSort!]! = []
  ): AccountPasswordResetConnection!
  fileAggregate(
    """Filter to find records to aggregate on"""
    filter: FileAggregateFilter
  ): [FileAggregateResponse!]!
  file(
    """The id of the record to find."""
    id: ID!
  ): File!
  files(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: FileFilter! = {}

    """Specify to sort results."""
    sorting: [FileSort!]! = []
  ): FileConnection!
  errorCodes: ErrorCodes!
  apiKeyAggregate(
    """Filter to find records to aggregate on"""
    filter: ApiKeyAggregateFilter
  ): [ApiKeyAggregateResponse!]!
  apiKey(
    """The id of the record to find."""
    id: ID!
  ): ApiKey!
  apiKeys(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ApiKeyFilter! = {}

    """Specify to sort results."""
    sorting: [ApiKeySort!]! = []
  ): ApiKeyConnection!
  orgBranchMemberAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgBranchMemberAggregateFilter
  ): [OrgBranchMemberAggregateResponse!]!
  orgBranchMember(
    """The id of the record to find."""
    id: ID!
  ): OrgBranchMember!
  orgBranchMembers(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrgBranchMemberFilter! = {}

    """Specify to sort results."""
    sorting: [OrgBranchMemberSort!]! = []
  ): OrgBranchMemberConnection!
  orgBranchAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgBranchAggregateFilter
  ): [OrgBranchAggregateResponse!]!
  orgBranch(
    """The id of the record to find."""
    id: ID!
  ): OrgBranch!
  orgBranches(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrgBranchFilter! = {}

    """Specify to sort results."""
    sorting: [OrgBranchSort!]! = []
  ): OrgBranchConnection!
  orgMemberAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgMemberAggregateFilter
  ): [OrgMemberAggregateResponse!]!
  orgMember(
    """The id of the record to find."""
    id: ID!
  ): OrgMember!
  orgMembers(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrgMemberFilter! = {}

    """Specify to sort results."""
    sorting: [OrgMemberSort!]! = []
  ): OrgMemberConnection!
  orgAggregate(
    """Filter to find records to aggregate on"""
    filter: OrgAggregateFilter
  ): [OrgAggregateResponse!]!
  org(
    """The id of the record to find."""
    id: ID!
  ): Org!
  orgs(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrgFilter! = {}

    """Specify to sort results."""
    sorting: [OrgSort!]! = []
  ): OrgConnection!
  customerAggregate(
    """Filter to find records to aggregate on"""
    filter: CustomerAggregateFilter
  ): [CustomerAggregateResponse!]!
  customer(
    """The id of the record to find."""
    id: ID!
  ): Customer!
  customers(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: CustomerFilter! = {}

    """Specify to sort results."""
    sorting: [CustomerSort!]! = []
  ): CustomerConnection!
  productCategoryAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductCategoryAggregateFilter
  ): [ProductCategoryAggregateResponse!]!
  productCategory(
    """The id of the record to find."""
    id: ID!
  ): ProductCategory!
  productCategories(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductCategoryFilter! = {}

    """Specify to sort results."""
    sorting: [ProductCategorySort!]! = []
  ): ProductCategoryConnection!
  productOptionGroupAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductOptionGroupAggregateFilter
  ): [ProductOptionGroupAggregateResponse!]!
  productOptionGroup(
    """The id of the record to find."""
    id: ID!
  ): ProductOptionGroup!
  productOptionGroups(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionGroupFilter! = {}

    """Specify to sort results."""
    sorting: [ProductOptionGroupSort!]! = []
  ): ProductOptionGroupConnection!
  productOptionAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductOptionAggregateFilter
  ): [ProductOptionAggregateResponse!]!
  productOption(
    """The id of the record to find."""
    id: ID!
  ): ProductOption!
  productOptions(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductOptionFilter! = {}

    """Specify to sort results."""
    sorting: [ProductOptionSort!]! = []
  ): ProductOptionConnection!
  productTypeAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductTypeAggregateFilter
  ): [ProductTypeAggregateResponse!]!
  productType(
    """The id of the record to find."""
    id: ID!
  ): ProductType!
  productTypes(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductTypeFilter! = {}

    """Specify to sort results."""
    sorting: [ProductTypeSort!]! = []
  ): ProductTypeConnection!
  productUnitAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductUnitAggregateFilter
  ): [ProductUnitAggregateResponse!]!
  productUnit(
    """The id of the record to find."""
    id: ID!
  ): ProductUnit!
  productUnits(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductUnitFilter! = {}

    """Specify to sort results."""
    sorting: [ProductUnitSort!]! = []
  ): ProductUnitConnection!
  productAggregate(
    """Filter to find records to aggregate on"""
    filter: ProductAggregateFilter
  ): [ProductAggregateResponse!]!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product!
  products(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductConnection!
  orderProductAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderProductAggregateFilter
  ): [OrderProductAggregateResponse!]!
  orderProduct(
    """The id of the record to find."""
    id: ID!
  ): OrderProduct!
  orderProducts(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderProductFilter! = {}

    """Specify to sort results."""
    sorting: [OrderProductSort!]! = []
  ): OrderProductConnection!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter! = {}

    """Specify to sort results."""
    sorting: [OrderSort!]! = []
  ): OrderConnection!
  shopAggregate(
    """Filter to find records to aggregate on"""
    filter: ShopAggregateFilter
  ): [ShopAggregateResponse!]!
  shop(
    """The id of the record to find."""
    id: ID!
  ): Shop!
  shops(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ShopFilter! = {}

    """Specify to sort results."""
    sorting: [ShopSort!]! = []
  ): ShopConnection!
  shopMemberAggregate(
    """Filter to find records to aggregate on"""
    filter: ShopMemberAggregateFilter
  ): [ShopMemberAggregateResponse!]!
  shopMember(
    """The id of the record to find."""
    id: ID!
  ): ShopMember!
  shopMembers(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ShopMemberFilter! = {}

    """Specify to sort results."""
    sorting: [ShopMemberSort!]! = []
  ): ShopMemberConnection!
  garageAggregate(
    """Filter to find records to aggregate on"""
    filter: GarageAggregateFilter
  ): [GarageAggregateResponse!]!
  garage(
    """The id of the record to find."""
    id: ID!
  ): Garage!
  garages(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: GarageFilter! = {}

    """Specify to sort results."""
    sorting: [GarageSort!]! = []
  ): GarageConnection!
  userVehicleAggregate(
    """Filter to find records to aggregate on"""
    filter: UserVehicleAggregateFilter
  ): [UserVehicleAggregateResponse!]!
  userVehicle(
    """The id of the record to find."""
    id: ID!
  ): UserVehicle!
  userVehicles(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: UserVehicleFilter! = {}

    """Specify to sort results."""
    sorting: [UserVehicleSort!]! = []
  ): UserVehicleConnection!
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  users(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
  vehicleBody(
    """The id of the record to find."""
    id: ID!
  ): VehicleBody!
  vehicleBodies(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleBodyFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleBodySort!]! = []
  ): VehicleBodyConnection!
  vehicleBrand(
    """The id of the record to find."""
    id: ID!
  ): VehicleBrand!
  vehicleBrands(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleBrandFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleBrandSort!]! = []
  ): VehicleBrandConnection!
  vehicleEngine(
    """The id of the record to find."""
    id: ID!
  ): VehicleEngine!
  vehicleEngines(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleEngineFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleEngineSort!]! = []
  ): VehicleEngineConnection!
  vehicleModelBody(
    """The id of the record to find."""
    id: ID!
  ): VehicleModelBody!
  vehicleModelBodies(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleModelBodyFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleModelBodySort!]! = []
  ): VehicleModelBodyConnection!
  vehicleModel(
    """The id of the record to find."""
    id: ID!
  ): VehicleModel!
  vehicleModels(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleModelFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleModelSort!]! = []
  ): VehicleModelConnection!
  vehicleTransmission(
    """The id of the record to find."""
    id: ID!
  ): VehicleTransmission!
  vehicleTransmissions(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: VehicleTransmissionFilter! = {}

    """Specify to sort results."""
    sorting: [VehicleTransmissionSort!]! = []
  ): VehicleTransmissionConnection!
  serviceLogBillAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceLogBillAggregateFilter
  ): [ServiceLogBillAggregateResponse!]!
  serviceLogBill(
    """The id of the record to find."""
    id: ID!
  ): ServiceLogBill!
  serviceLogBills(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ServiceLogBillFilter! = {}

    """Specify to sort results."""
    sorting: [ServiceLogBillSort!]! = []
  ): ServiceLogBillConnection!
  serviceLogAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceLogAggregateFilter
  ): [ServiceLogAggregateResponse!]!
  serviceLog(
    """The id of the record to find."""
    id: ID!
  ): ServiceLog!
  serviceLogs(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: ServiceLogFilter! = {}

    """Specify to sort results."""
    sorting: [ServiceLogSort!]! = []
  ): ServiceLogConnection!
}

input AccountAggregateFilter {
  and: [AccountAggregateFilter!]
  or: [AccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: AccountAggregateFilterUserAggregateFilter
}

input AccountAggregateFilterUserAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountAggregateFilterUserAggregateFilterAccountAggregateFilter
  vehicles: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter
}

input AccountAggregateFilterUserAggregateFilterAccountAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterAccountAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: AccountAggregateFilterUserAggregateFilterAccountAggregateFilterUserAggregateFilter
}

input AccountAggregateFilterUserAggregateFilterAccountAggregateFilterUserAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  transmission: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleTransmissionAggregateFilter
  engine: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleEngineAggregateFilter
  body: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelBodyAggregateFilter
  model: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelAggregateFilter
  owner: AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterUserAggregateFilter
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleTransmissionAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleTransmissionAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleTransmissionAggregateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleEngineAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleEngineAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleEngineAggregateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelBodyAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelBodyAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelBodyAggregateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterVehicleModelAggregateFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterUserAggregateFilter {
  and: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterUserAggregateFilter!]
  or: [AccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input AccountFilter {
  and: [AccountFilter!]
  or: [AccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: AccountFilterUserFilter
}

input AccountFilterUserFilter {
  and: [AccountFilterUserFilter!]
  or: [AccountFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountFilterUserFilterAccountFilter
  vehicles: AccountFilterUserFilterUserVehicleFilter
}

input AccountFilterUserFilterAccountFilter {
  and: [AccountFilterUserFilterAccountFilter!]
  or: [AccountFilterUserFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: AccountFilterUserFilterAccountFilterUserFilter
}

input AccountFilterUserFilterAccountFilterUserFilter {
  and: [AccountFilterUserFilterAccountFilterUserFilter!]
  or: [AccountFilterUserFilterAccountFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountFilterUserFilterUserVehicleFilter {
  and: [AccountFilterUserFilterUserVehicleFilter!]
  or: [AccountFilterUserFilterUserVehicleFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  transmission: AccountFilterUserFilterUserVehicleFilterVehicleTransmissionFilter
  engine: AccountFilterUserFilterUserVehicleFilterVehicleEngineFilter
  body: AccountFilterUserFilterUserVehicleFilterVehicleModelBodyFilter
  model: AccountFilterUserFilterUserVehicleFilterVehicleModelFilter
  owner: AccountFilterUserFilterUserVehicleFilterUserFilter
}

input AccountFilterUserFilterUserVehicleFilterVehicleTransmissionFilter {
  and: [AccountFilterUserFilterUserVehicleFilterVehicleTransmissionFilter!]
  or: [AccountFilterUserFilterUserVehicleFilterVehicleTransmissionFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountFilterUserFilterUserVehicleFilterVehicleEngineFilter {
  and: [AccountFilterUserFilterUserVehicleFilterVehicleEngineFilter!]
  or: [AccountFilterUserFilterUserVehicleFilterVehicleEngineFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountFilterUserFilterUserVehicleFilterVehicleModelBodyFilter {
  and: [AccountFilterUserFilterUserVehicleFilterVehicleModelBodyFilter!]
  or: [AccountFilterUserFilterUserVehicleFilterVehicleModelBodyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountFilterUserFilterUserVehicleFilterVehicleModelFilter {
  and: [AccountFilterUserFilterUserVehicleFilterVehicleModelFilter!]
  or: [AccountFilterUserFilterUserVehicleFilterVehicleModelFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountFilterUserFilterUserVehicleFilterUserFilter {
  and: [AccountFilterUserFilterUserVehicleFilterUserFilter!]
  or: [AccountFilterUserFilterUserVehicleFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountSort {
  field: AccountSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AccountSortFields {
  email
  role
  firstName
  lastName
  id
  emailVerified
  createdAt
  updatedAt
  deletedAt
}

input AccountVerficationAggregateFilter {
  and: [AccountVerficationAggregateFilter!]
  or: [AccountVerficationAggregateFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountVerficationAggregateFilterAccountAggregateFilter
}

input AccountVerficationAggregateFilterAccountAggregateFilter {
  and: [AccountVerficationAggregateFilterAccountAggregateFilter!]
  or: [AccountVerficationAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountVerficationFilter {
  and: [AccountVerficationFilter!]
  or: [AccountVerficationFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountVerficationFilterAccountFilter
}

input AccountVerficationFilterAccountFilter {
  and: [AccountVerficationFilterAccountFilter!]
  or: [AccountVerficationFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountVerficationSort {
  field: AccountVerficationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AccountVerficationSortFields {
  token
  code
  id
  used
  expiredAt
  createdAt
  updatedAt
  deletedAt
}

input AccountPasswordResetAggregateFilter {
  and: [AccountPasswordResetAggregateFilter!]
  or: [AccountPasswordResetAggregateFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountPasswordResetAggregateFilterAccountAggregateFilter
}

input AccountPasswordResetAggregateFilterAccountAggregateFilter {
  and: [AccountPasswordResetAggregateFilterAccountAggregateFilter!]
  or: [AccountPasswordResetAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountPasswordResetFilter {
  and: [AccountPasswordResetFilter!]
  or: [AccountPasswordResetFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: AccountPasswordResetFilterAccountFilter
}

input AccountPasswordResetFilterAccountFilter {
  and: [AccountPasswordResetFilterAccountFilter!]
  or: [AccountPasswordResetFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AccountPasswordResetSort {
  field: AccountPasswordResetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AccountPasswordResetSortFields {
  token
  code
  id
  used
  expiredAt
  createdAt
  updatedAt
  deletedAt
}

input FileAggregateFilter {
  and: [FileAggregateFilter!]
  or: [FileAggregateFilter!]
  name: StringFieldComparison
  mimetype: StringFieldComparison
  refId: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: FileAggregateFilterAccountAggregateFilter
}

input FileAggregateFilterAccountAggregateFilter {
  and: [FileAggregateFilterAccountAggregateFilter!]
  or: [FileAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input FileFilter {
  and: [FileFilter!]
  or: [FileFilter!]
  name: StringFieldComparison
  mimetype: StringFieldComparison
  refId: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: FileFilterAccountFilter
}

input FileFilterAccountFilter {
  and: [FileFilterAccountFilter!]
  or: [FileFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input FileSort {
  field: FileSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FileSortFields {
  name
  mimetype
  refId
  id
  createdAt
  updatedAt
  deletedAt
}

enum ErrorCodes {
  UPLOAD_MEDIA_NOT_FOUND
  UPLOAD_FILE_NOT_FOUND
  AUTH_FORBIDDEN
  AUTH_ACCOUNT_NOT_FOUND
  AUTH_ACCOUNT_PENDING_ACTIVATION
  AUTH_ACCOUNT_EXISTS
  AUTH_REQUEST_EXPIRED
  AUTH_REQUEST_NOT_FOUND
  ORG_BRANCH_NOT_FOUND
  PRODUCT_IMPORT_EMPTY_RECORDS
  PRODUCT_PRICE_IMPORT_EMPTY_RECORDS
  SALE_BRANCH_SALE_CHANNEL_NOT_FOUND
  SALE_ORDER_IMPORT_PARSE_FAILURE
}

input ApiKeyAggregateFilter {
  and: [ApiKeyAggregateFilter!]
  or: [ApiKeyAggregateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  expired: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ApiKeyFilter {
  and: [ApiKeyFilter!]
  or: [ApiKeyFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  expired: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ApiKeySort {
  field: ApiKeySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ApiKeySortFields {
  name
  id
  expired
  expiredAt
  createdAt
  updatedAt
  deletedAt
}

input OrgAggregateFilter {
  and: [OrgAggregateFilter!]
  or: [OrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgAggregateFilterAccountAggregateFilter
  shops: OrgAggregateFilterShopAggregateFilter
  branches: OrgAggregateFilterOrgBranchAggregateFilter
  members: OrgAggregateFilterOrgMemberAggregateFilter
}

input OrgAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: OrgAggregateFilterAccountAggregateFilterUserAggregateFilter
}

input OrgAggregateFilterAccountAggregateFilterUserAggregateFilter {
  and: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  or: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: OrgAggregateFilterAccountAggregateFilterUserAggregateFilterAccountAggregateFilter
  vehicles: OrgAggregateFilterAccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter
}

input OrgAggregateFilterAccountAggregateFilterUserAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterAccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter {
  and: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter!]
  or: [OrgAggregateFilterAccountAggregateFilterUserAggregateFilterUserVehicleAggregateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilter
  org: OrgAggregateFilterShopAggregateFilterOrgAggregateFilter
  members: OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilter
}

input OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter
  members: OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter
}

input OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterOrgAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgAggregateFilterShopAggregateFilterOrgAggregateFilterAccountAggregateFilter
  shops: OrgAggregateFilterShopAggregateFilterOrgAggregateFilterShopAggregateFilter
  branches: OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter
  members: OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter
}

input OrgAggregateFilterShopAggregateFilterOrgAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterOrgAggregateFilterShopAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  shop: OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterShopAggregateFilter
  account: OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterAccountAggregateFilter
}

input OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterShopAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterShopAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterShopAggregateFilterShopMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter
  members: OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterAccountAggregateFilter
  shops: OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterShopAggregateFilter
  branches: OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter
  members: OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterShopAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterOrgBranchAggregateFilter
  account: OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterAccountAggregateFilter
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterOrgBranchAggregateFilterOrgBranchMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgMemberAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilter
  account: OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilter
}

input OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterAccountAggregateFilter
  shops: OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterShopAggregateFilter
  branches: OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter
  members: OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter
}

input OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterShopAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterShopAggregateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterOrgAggregateFilterOrgMemberAggregateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilterUserAggregateFilter
}

input OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilterUserAggregateFilter {
  and: [OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  or: [OrgAggregateFilterOrgMemberAggregateFilterAccountAggregateFilterUserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilter {
  and: [OrgFilter!]
  or: [OrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgFilterAccountFilter
  shops: OrgFilterShopFilter
  branches: OrgFilterOrgBranchFilter
  members: OrgFilterOrgMemberFilter
}

input OrgFilterAccountFilter {
  and: [OrgFilterAccountFilter!]
  or: [OrgFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: OrgFilterAccountFilterUserFilter
}

input OrgFilterAccountFilterUserFilter {
  and: [OrgFilterAccountFilterUserFilter!]
  or: [OrgFilterAccountFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: OrgFilterAccountFilterUserFilterAccountFilter
  vehicles: OrgFilterAccountFilterUserFilterUserVehicleFilter
}

input OrgFilterAccountFilterUserFilterAccountFilter {
  and: [OrgFilterAccountFilterUserFilterAccountFilter!]
  or: [OrgFilterAccountFilterUserFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterAccountFilterUserFilterUserVehicleFilter {
  and: [OrgFilterAccountFilterUserFilterUserVehicleFilter!]
  or: [OrgFilterAccountFilterUserFilterUserVehicleFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilter {
  and: [OrgFilterShopFilter!]
  or: [OrgFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgFilterShopFilterOrgBranchFilter
  org: OrgFilterShopFilterOrgFilter
  members: OrgFilterShopFilterShopMemberFilter
}

input OrgFilterShopFilterOrgBranchFilter {
  and: [OrgFilterShopFilterOrgBranchFilter!]
  or: [OrgFilterShopFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgFilterShopFilterOrgBranchFilterOrgFilter
  members: OrgFilterShopFilterOrgBranchFilterOrgBranchMemberFilter
}

input OrgFilterShopFilterOrgBranchFilterOrgFilter {
  and: [OrgFilterShopFilterOrgBranchFilterOrgFilter!]
  or: [OrgFilterShopFilterOrgBranchFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterOrgBranchFilterOrgBranchMemberFilter {
  and: [OrgFilterShopFilterOrgBranchFilterOrgBranchMemberFilter!]
  or: [OrgFilterShopFilterOrgBranchFilterOrgBranchMemberFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterOrgFilter {
  and: [OrgFilterShopFilterOrgFilter!]
  or: [OrgFilterShopFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgFilterShopFilterOrgFilterAccountFilter
  shops: OrgFilterShopFilterOrgFilterShopFilter
  branches: OrgFilterShopFilterOrgFilterOrgBranchFilter
  members: OrgFilterShopFilterOrgFilterOrgMemberFilter
}

input OrgFilterShopFilterOrgFilterAccountFilter {
  and: [OrgFilterShopFilterOrgFilterAccountFilter!]
  or: [OrgFilterShopFilterOrgFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterOrgFilterShopFilter {
  and: [OrgFilterShopFilterOrgFilterShopFilter!]
  or: [OrgFilterShopFilterOrgFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterOrgFilterOrgBranchFilter {
  and: [OrgFilterShopFilterOrgFilterOrgBranchFilter!]
  or: [OrgFilterShopFilterOrgFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterOrgFilterOrgMemberFilter {
  and: [OrgFilterShopFilterOrgFilterOrgMemberFilter!]
  or: [OrgFilterShopFilterOrgFilterOrgMemberFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterShopMemberFilter {
  and: [OrgFilterShopFilterShopMemberFilter!]
  or: [OrgFilterShopFilterShopMemberFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  shop: OrgFilterShopFilterShopMemberFilterShopFilter
  account: OrgFilterShopFilterShopMemberFilterAccountFilter
}

input OrgFilterShopFilterShopMemberFilterShopFilter {
  and: [OrgFilterShopFilterShopMemberFilterShopFilter!]
  or: [OrgFilterShopFilterShopMemberFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterShopFilterShopMemberFilterAccountFilter {
  and: [OrgFilterShopFilterShopMemberFilterAccountFilter!]
  or: [OrgFilterShopFilterShopMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilter {
  and: [OrgFilterOrgBranchFilter!]
  or: [OrgFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgFilterOrgBranchFilterOrgFilter
  members: OrgFilterOrgBranchFilterOrgBranchMemberFilter
}

input OrgFilterOrgBranchFilterOrgFilter {
  and: [OrgFilterOrgBranchFilterOrgFilter!]
  or: [OrgFilterOrgBranchFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgFilterOrgBranchFilterOrgFilterAccountFilter
  shops: OrgFilterOrgBranchFilterOrgFilterShopFilter
  branches: OrgFilterOrgBranchFilterOrgFilterOrgBranchFilter
  members: OrgFilterOrgBranchFilterOrgFilterOrgMemberFilter
}

input OrgFilterOrgBranchFilterOrgFilterAccountFilter {
  and: [OrgFilterOrgBranchFilterOrgFilterAccountFilter!]
  or: [OrgFilterOrgBranchFilterOrgFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilterOrgFilterShopFilter {
  and: [OrgFilterOrgBranchFilterOrgFilterShopFilter!]
  or: [OrgFilterOrgBranchFilterOrgFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilterOrgFilterOrgBranchFilter {
  and: [OrgFilterOrgBranchFilterOrgFilterOrgBranchFilter!]
  or: [OrgFilterOrgBranchFilterOrgFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilterOrgFilterOrgMemberFilter {
  and: [OrgFilterOrgBranchFilterOrgFilterOrgMemberFilter!]
  or: [OrgFilterOrgBranchFilterOrgFilterOrgMemberFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilterOrgBranchMemberFilter {
  and: [OrgFilterOrgBranchFilterOrgBranchMemberFilter!]
  or: [OrgFilterOrgBranchFilterOrgBranchMemberFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: OrgFilterOrgBranchFilterOrgBranchMemberFilterOrgBranchFilter
  account: OrgFilterOrgBranchFilterOrgBranchMemberFilterAccountFilter
}

input OrgFilterOrgBranchFilterOrgBranchMemberFilterOrgBranchFilter {
  and: [OrgFilterOrgBranchFilterOrgBranchMemberFilterOrgBranchFilter!]
  or: [OrgFilterOrgBranchFilterOrgBranchMemberFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgBranchFilterOrgBranchMemberFilterAccountFilter {
  and: [OrgFilterOrgBranchFilterOrgBranchMemberFilterAccountFilter!]
  or: [OrgFilterOrgBranchFilterOrgBranchMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgMemberFilter {
  and: [OrgFilterOrgMemberFilter!]
  or: [OrgFilterOrgMemberFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  org: OrgFilterOrgMemberFilterOrgFilter
  account: OrgFilterOrgMemberFilterAccountFilter
}

input OrgFilterOrgMemberFilterOrgFilter {
  and: [OrgFilterOrgMemberFilterOrgFilter!]
  or: [OrgFilterOrgMemberFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  createdBy: OrgFilterOrgMemberFilterOrgFilterAccountFilter
  shops: OrgFilterOrgMemberFilterOrgFilterShopFilter
  branches: OrgFilterOrgMemberFilterOrgFilterOrgBranchFilter
  members: OrgFilterOrgMemberFilterOrgFilterOrgMemberFilter
}

input OrgFilterOrgMemberFilterOrgFilterAccountFilter {
  and: [OrgFilterOrgMemberFilterOrgFilterAccountFilter!]
  or: [OrgFilterOrgMemberFilterOrgFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgMemberFilterOrgFilterShopFilter {
  and: [OrgFilterOrgMemberFilterOrgFilterShopFilter!]
  or: [OrgFilterOrgMemberFilterOrgFilterShopFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgMemberFilterOrgFilterOrgBranchFilter {
  and: [OrgFilterOrgMemberFilterOrgFilterOrgBranchFilter!]
  or: [OrgFilterOrgMemberFilterOrgFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgMemberFilterOrgFilterOrgMemberFilter {
  and: [OrgFilterOrgMemberFilterOrgFilterOrgMemberFilter!]
  or: [OrgFilterOrgMemberFilterOrgFilterOrgMemberFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgFilterOrgMemberFilterAccountFilter {
  and: [OrgFilterOrgMemberFilterAccountFilter!]
  or: [OrgFilterOrgMemberFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  user: OrgFilterOrgMemberFilterAccountFilterUserFilter
}

input OrgFilterOrgMemberFilterAccountFilterUserFilter {
  and: [OrgFilterOrgMemberFilterAccountFilterUserFilter!]
  or: [OrgFilterOrgMemberFilterAccountFilterUserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrgSort {
  field: OrgSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrgSortFields {
  type
  name
  status
  id
  createdAt
  updatedAt
  deletedAt
}

input CustomerAggregateFilter {
  and: [CustomerAggregateFilter!]
  or: [CustomerAggregateFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  addresses: CustomerAggregateFilterCustomerAddressAggregateFilter
}

input CustomerAggregateFilterCustomerAddressAggregateFilter {
  and: [CustomerAggregateFilterCustomerAddressAggregateFilter!]
  or: [CustomerAggregateFilterCustomerAddressAggregateFilter!]
  full: StringFieldComparison
  distanceKm: NumberFieldComparison
  city: StringFieldComparison
  district: StringFieldComparison
  ward: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CustomerFilter {
  and: [CustomerFilter!]
  or: [CustomerFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  addresses: CustomerFilterCustomerAddressFilter
}

input CustomerFilterCustomerAddressFilter {
  and: [CustomerFilterCustomerAddressFilter!]
  or: [CustomerFilterCustomerAddressFilter!]
  full: StringFieldComparison
  distanceKm: NumberFieldComparison
  city: StringFieldComparison
  district: StringFieldComparison
  ward: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CustomerSort {
  field: CustomerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CustomerSortFields {
  phone
  email
  firstName
  lastName
  gender
  id
  createdAt
  updatedAt
  deletedAt
}

input ProductTypeAggregateFilter {
  and: [ProductTypeAggregateFilter!]
  or: [ProductTypeAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductTypeAggregateFilterOrgBranchAggregateFilter
  products: ProductTypeAggregateFilterProductAggregateFilter
}

input ProductTypeAggregateFilterOrgBranchAggregateFilter {
  and: [ProductTypeAggregateFilterOrgBranchAggregateFilter!]
  or: [ProductTypeAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductTypeAggregateFilterProductAggregateFilter {
  and: [ProductTypeAggregateFilterProductAggregateFilter!]
  or: [ProductTypeAggregateFilterProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductTypeFilter {
  and: [ProductTypeFilter!]
  or: [ProductTypeFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductTypeFilterOrgBranchFilter
  products: ProductTypeFilterProductFilter
}

input ProductTypeFilterOrgBranchFilter {
  and: [ProductTypeFilterOrgBranchFilter!]
  or: [ProductTypeFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductTypeFilterProductFilter {
  and: [ProductTypeFilterProductFilter!]
  or: [ProductTypeFilterProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductTypeSort {
  field: ProductTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductTypeSortFields {
  sku
  name
  id
  createdAt
  updatedAt
  deletedAt
}

input ProductUnitAggregateFilter {
  and: [ProductUnitAggregateFilter!]
  or: [ProductUnitAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductUnitAggregateFilterOrgBranchAggregateFilter
  products: ProductUnitAggregateFilterProductAggregateFilter
}

input ProductUnitAggregateFilterOrgBranchAggregateFilter {
  and: [ProductUnitAggregateFilterOrgBranchAggregateFilter!]
  or: [ProductUnitAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductUnitAggregateFilterProductAggregateFilter {
  and: [ProductUnitAggregateFilterProductAggregateFilter!]
  or: [ProductUnitAggregateFilterProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductUnitFilter {
  and: [ProductUnitFilter!]
  or: [ProductUnitFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: ProductUnitFilterOrgBranchFilter
  products: ProductUnitFilterProductFilter
}

input ProductUnitFilterOrgBranchFilter {
  and: [ProductUnitFilterOrgBranchFilter!]
  or: [ProductUnitFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductUnitFilterProductFilter {
  and: [ProductUnitFilterProductFilter!]
  or: [ProductUnitFilterProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductUnitSort {
  field: ProductUnitSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductUnitSortFields {
  sku
  name
  id
  createdAt
  updatedAt
  deletedAt
}

input OrderProductAggregateFilter {
  and: [OrderProductAggregateFilter!]
  or: [OrderProductAggregateFilter!]
  quantity: NumberFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  order: OrderProductAggregateFilterOrderAggregateFilter
  product: OrderProductAggregateFilterProductAggregateFilter
  options: OrderProductAggregateFilterProductOptionAggregateFilter
}

input OrderProductAggregateFilterOrderAggregateFilter {
  and: [OrderProductAggregateFilterOrderAggregateFilter!]
  or: [OrderProductAggregateFilterOrderAggregateFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductAggregateFilterProductAggregateFilter {
  and: [OrderProductAggregateFilterProductAggregateFilter!]
  or: [OrderProductAggregateFilterProductAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductAggregateFilterProductOptionAggregateFilter {
  and: [OrderProductAggregateFilterProductOptionAggregateFilter!]
  or: [OrderProductAggregateFilterProductOptionAggregateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductFilter {
  and: [OrderProductFilter!]
  or: [OrderProductFilter!]
  quantity: NumberFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  order: OrderProductFilterOrderFilter
  product: OrderProductFilterProductFilter
  options: OrderProductFilterProductOptionFilter
}

input OrderProductFilterOrderFilter {
  and: [OrderProductFilterOrderFilter!]
  or: [OrderProductFilterOrderFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductFilterProductFilter {
  and: [OrderProductFilterProductFilter!]
  or: [OrderProductFilterProductFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductFilterProductOptionFilter {
  and: [OrderProductFilterProductOptionFilter!]
  or: [OrderProductFilterProductOptionFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderProductSort {
  field: OrderProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderProductSortFields {
  quantity
  grossPrice
  discountPrice
  netPrice
  id
  createdAt
  updatedAt
  deletedAt
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  customer: OrderAggregateFilterCustomerAggregateFilter
  branch: OrderAggregateFilterOrgBranchAggregateFilter
}

input OrderAggregateFilterCustomerAggregateFilter {
  and: [OrderAggregateFilterCustomerAggregateFilter!]
  or: [OrderAggregateFilterCustomerAggregateFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderAggregateFilterOrgBranchAggregateFilter {
  and: [OrderAggregateFilterOrgBranchAggregateFilter!]
  or: [OrderAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  customer: OrderFilterCustomerFilter
  branch: OrderFilterOrgBranchFilter
}

input OrderFilterCustomerFilter {
  and: [OrderFilterCustomerFilter!]
  or: [OrderFilterCustomerFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderFilterOrgBranchFilter {
  and: [OrderFilterOrgBranchFilter!]
  or: [OrderFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  refId
  grossPrice
  discountPrice
  commissionPercent
  commissionPrice
  netPrice
  id
  createdAt
  updatedAt
  deletedAt
}

input GarageAggregateFilter {
  and: [GarageAggregateFilter!]
  or: [GarageAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: GarageAggregateFilterOrgBranchAggregateFilter
  org: GarageAggregateFilterOrgAggregateFilter
}

input GarageStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: GarageStatus
  neq: GarageStatus
  gt: GarageStatus
  gte: GarageStatus
  lt: GarageStatus
  lte: GarageStatus
  like: GarageStatus
  notLike: GarageStatus
  iLike: GarageStatus
  notILike: GarageStatus
  in: [GarageStatus!]
  notIn: [GarageStatus!]
}

input GarageAggregateFilterOrgBranchAggregateFilter {
  and: [GarageAggregateFilterOrgBranchAggregateFilter!]
  or: [GarageAggregateFilterOrgBranchAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input GarageAggregateFilterOrgAggregateFilter {
  and: [GarageAggregateFilterOrgAggregateFilter!]
  or: [GarageAggregateFilterOrgAggregateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input GarageFilter {
  and: [GarageFilter!]
  or: [GarageFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  branch: GarageFilterOrgBranchFilter
  org: GarageFilterOrgFilter
}

input GarageFilterOrgBranchFilter {
  and: [GarageFilterOrgBranchFilter!]
  or: [GarageFilterOrgBranchFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input GarageFilterOrgFilter {
  and: [GarageFilterOrgFilter!]
  or: [GarageFilterOrgFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input GarageSort {
  field: GarageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum GarageSortFields {
  name
  phone_number
  gplace_id
  lat
  lng
  status
  id
  createdAt
  updatedAt
  deletedAt
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: UserAggregateFilterAccountAggregateFilter
  vehicles: UserAggregateFilterUserVehicleAggregateFilter
}

input UserAggregateFilterAccountAggregateFilter {
  and: [UserAggregateFilterAccountAggregateFilter!]
  or: [UserAggregateFilterAccountAggregateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserAggregateFilterUserVehicleAggregateFilter {
  and: [UserAggregateFilterUserVehicleAggregateFilter!]
  or: [UserAggregateFilterUserVehicleAggregateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  account: UserFilterAccountFilter
  vehicles: UserFilterUserVehicleFilter
}

input UserFilterAccountFilter {
  and: [UserFilterAccountFilter!]
  or: [UserFilterAccountFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserFilterUserVehicleFilter {
  and: [UserFilterUserVehicleFilter!]
  or: [UserFilterUserVehicleFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  phone_number
  status
  id
  createdAt
  updatedAt
  deletedAt
}

input VehicleBodyFilter {
  and: [VehicleBodyFilter!]
  or: [VehicleBodyFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleBodySort {
  field: VehicleBodySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleBodySortFields {
  name
  id
  createdAt
  updatedAt
  deletedAt
}

input VehicleBrandFilter {
  and: [VehicleBrandFilter!]
  or: [VehicleBrandFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  endYear: IntFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleBrandSort {
  field: VehicleBrandSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleBrandSortFields {
  name
  startYear
  endYear
  id
  createdAt
  updatedAt
  deletedAt
}

input VehicleModelFilter {
  and: [VehicleModelFilter!]
  or: [VehicleModelFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  brand: VehicleModelFilterVehicleBrandFilter
  parent: VehicleModelFilterVehicleModelFilter
  transmissions: VehicleModelFilterVehicleTransmissionFilter
  engines: VehicleModelFilterVehicleEngineFilter
  bodies: VehicleModelFilterVehicleModelBodyFilter
}

input VehicleModelFilterVehicleBrandFilter {
  and: [VehicleModelFilterVehicleBrandFilter!]
  or: [VehicleModelFilterVehicleBrandFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  endYear: IntFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelFilterVehicleModelFilter {
  and: [VehicleModelFilterVehicleModelFilter!]
  or: [VehicleModelFilterVehicleModelFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelFilterVehicleTransmissionFilter {
  and: [VehicleModelFilterVehicleTransmissionFilter!]
  or: [VehicleModelFilterVehicleTransmissionFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelFilterVehicleEngineFilter {
  and: [VehicleModelFilterVehicleEngineFilter!]
  or: [VehicleModelFilterVehicleEngineFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelFilterVehicleModelBodyFilter {
  and: [VehicleModelFilterVehicleModelBodyFilter!]
  or: [VehicleModelFilterVehicleModelBodyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input VehicleModelSort {
  field: VehicleModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VehicleModelSortFields {
  name
  startYear
  id
  endYear
  createdAt
  updatedAt
  deletedAt
}

input ServiceLogAggregateFilter {
  and: [ServiceLogAggregateFilter!]
  or: [ServiceLogAggregateFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  vehicle: ServiceLogAggregateFilterUserVehicleAggregateFilter
  garage: ServiceLogAggregateFilterGarageAggregateFilter
  bills: ServiceLogAggregateFilterServiceLogBillAggregateFilter
}

input ServiceLogAggregateFilterUserVehicleAggregateFilter {
  and: [ServiceLogAggregateFilterUserVehicleAggregateFilter!]
  or: [ServiceLogAggregateFilterUserVehicleAggregateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogAggregateFilterGarageAggregateFilter {
  and: [ServiceLogAggregateFilterGarageAggregateFilter!]
  or: [ServiceLogAggregateFilterGarageAggregateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogAggregateFilterServiceLogBillAggregateFilter {
  and: [ServiceLogAggregateFilterServiceLogBillAggregateFilter!]
  or: [ServiceLogAggregateFilterServiceLogBillAggregateFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogFilter {
  and: [ServiceLogFilter!]
  or: [ServiceLogFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  vehicle: ServiceLogFilterUserVehicleFilter
  garage: ServiceLogFilterGarageFilter
  bills: ServiceLogFilterServiceLogBillFilter
}

input ServiceLogFilterUserVehicleFilter {
  and: [ServiceLogFilterUserVehicleFilter!]
  or: [ServiceLogFilterUserVehicleFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogFilterGarageFilter {
  and: [ServiceLogFilterGarageFilter!]
  or: [ServiceLogFilterGarageFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogFilterServiceLogBillFilter {
  and: [ServiceLogFilterServiceLogBillFilter!]
  or: [ServiceLogFilterServiceLogBillFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ServiceLogSort {
  field: ServiceLogSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceLogSortFields {
  type
  description
  date
  id
  createdAt
  updatedAt
  deletedAt
}

type Mutation {
  authLogin(input: AuthLoginInput!): LoginResult!
  authRefreshToken(input: AuthRefreshTokenInput!): LoginResult!
  authRegister(input: AuthRegisterInput!): Boolean!
  authResendVerification(input: AuthResendVerificationInput!): Boolean!
  authResendVerificationWithEmail(input: AuthResendVerificationWithEmailInput!): Boolean!
  authVerify(input: AuthVerifyAccountInput!): Boolean!
  authVerifyByCode(input: AuthVerifyAccountByCodeInput!): Boolean!
  authRequestPasswordReset(input: AuthRequestPasswordResetInput!): Boolean!
  authConfirmPasswordReset(input: AuthConfirmPasswordResetInput!): Boolean!
  authConfirmPasswordResetByCode(input: AuthConfirmPasswordResetByCodeInput!): Boolean!
  setUserOnAccount(input: SetUserOnAccountInput!): Account!
  createOneAccount(input: CreateOneAccountInput!): Account!
  createManyAccounts(input: CreateManyAccountsInput!): [Account!]!
  updateOneAccount(input: UpdateOneAccountInput!): Account!
  updateManyAccounts(input: UpdateManyAccountsInput!): UpdateManyResponse!
  deleteOneAccount(input: DeleteOneAccountInput!): AccountDeleteResponse!
  deleteManyAccounts(input: DeleteManyAccountsInput!): DeleteManyResponse!
  createOneAccountVerfication(input: CreateOneAccountVerficationInput!): AccountVerfication!
  createManyAccountVerfications(input: CreateManyAccountVerficationsInput!): [AccountVerfication!]!
  updateOneAccountVerfication(input: UpdateOneAccountVerficationInput!): AccountVerfication!
  updateManyAccountVerfications(input: UpdateManyAccountVerficationsInput!): UpdateManyResponse!
  deleteOneAccountVerfication(input: DeleteOneAccountVerficationInput!): AccountVerficationDeleteResponse!
  deleteManyAccountVerfications(input: DeleteManyAccountVerficationsInput!): DeleteManyResponse!
  createOneAccountPasswordReset(input: CreateOneAccountPasswordResetInput!): AccountPasswordReset!
  createManyAccountPasswordResets(input: CreateManyAccountPasswordResetsInput!): [AccountPasswordReset!]!
  updateOneAccountPasswordReset(input: UpdateOneAccountPasswordResetInput!): AccountPasswordReset!
  updateManyAccountPasswordResets(input: UpdateManyAccountPasswordResetsInput!): UpdateManyResponse!
  deleteOneAccountPasswordReset(input: DeleteOneAccountPasswordResetInput!): AccountPasswordResetDeleteResponse!
  deleteManyAccountPasswordResets(input: DeleteManyAccountPasswordResetsInput!): DeleteManyResponse!
  createOneFile(input: CreateOneFileInput!): File!
  createManyFiles(input: CreateManyFilesInput!): [File!]!
  updateOneFile(input: UpdateOneFileInput!): File!
  updateManyFiles(input: UpdateManyFilesInput!): UpdateManyResponse!
  deleteOneFile(input: DeleteOneFileInput!): FileDeleteResponse!
  deleteManyFiles(input: DeleteManyFilesInput!): DeleteManyResponse!
  createOneApiKey(input: CreateOneApiKeyInput!): ApiKey!
  createManyApiKeys(input: CreateManyApiKeysInput!): [ApiKey!]!
  updateOneApiKey(input: UpdateOneApiKeyInput!): ApiKey!
  updateManyApiKeys(input: UpdateManyApiKeysInput!): UpdateManyResponse!
  deleteOneApiKey(input: DeleteOneApiKeyInput!): ApiKeyDeleteResponse!
  deleteManyApiKeys(input: DeleteManyApiKeysInput!): DeleteManyResponse!
  createOneOrgBranchMember(input: CreateOneOrgBranchMemberInput!): OrgBranchMember!
  createManyOrgBranchMembers(input: CreateManyOrgBranchMembersInput!): [OrgBranchMember!]!
  updateOneOrgBranchMember(input: UpdateOneOrgBranchMemberInput!): OrgBranchMember!
  updateManyOrgBranchMembers(input: UpdateManyOrgBranchMembersInput!): UpdateManyResponse!
  deleteOneOrgBranchMember(input: DeleteOneOrgBranchMemberInput!): OrgBranchMemberDeleteResponse!
  deleteManyOrgBranchMembers(input: DeleteManyOrgBranchMembersInput!): DeleteManyResponse!
  addMembersToOrgBranch(input: AddMembersToOrgBranchInput!): OrgBranch!
  setMembersOnOrgBranch(input: SetMembersOnOrgBranchInput!): OrgBranch!
  createOneOrgBranch(input: CreateOneOrgBranchInput!): OrgBranch!
  createManyOrgBranches(input: CreateManyOrgBranchesInput!): [OrgBranch!]!
  updateOneOrgBranch(input: UpdateOneOrgBranchInput!): OrgBranch!
  updateManyOrgBranches(input: UpdateManyOrgBranchesInput!): UpdateManyResponse!
  deleteOneOrgBranch(input: DeleteOneOrgBranchInput!): OrgBranchDeleteResponse!
  deleteManyOrgBranches(input: DeleteManyOrgBranchesInput!): DeleteManyResponse!
  createOneOrgMember(input: CreateOneOrgMemberInput!): OrgMember!
  createManyOrgMembers(input: CreateManyOrgMembersInput!): [OrgMember!]!
  updateOneOrgMember(input: UpdateOneOrgMemberInput!): OrgMember!
  updateManyOrgMembers(input: UpdateManyOrgMembersInput!): UpdateManyResponse!
  deleteOneOrgMember(input: DeleteOneOrgMemberInput!): OrgMemberDeleteResponse!
  deleteManyOrgMembers(input: DeleteManyOrgMembersInput!): DeleteManyResponse!
  addMembersToOrg(input: AddMembersToOrgInput!): Org!
  setMembersOnOrg(input: SetMembersOnOrgInput!): Org!
  addBranchesToOrg(input: AddBranchesToOrgInput!): Org!
  setBranchesOnOrg(input: SetBranchesOnOrgInput!): Org!
  addShopsToOrg(input: AddShopsToOrgInput!): Org!
  setShopsOnOrg(input: SetShopsOnOrgInput!): Org!
  createOneOrg(input: CreateOneOrgInput!): Org!
  createManyOrgs(input: CreateManyOrgsInput!): [Org!]!
  updateOneOrg(input: UpdateOneOrgInput!): Org!
  updateManyOrgs(input: UpdateManyOrgsInput!): UpdateManyResponse!
  deleteOneOrg(input: DeleteOneOrgInput!): OrgDeleteResponse!
  deleteManyOrgs(input: DeleteManyOrgsInput!): DeleteManyResponse!
  addAddressesToCustomer(input: AddAddressesToCustomerInput!): Customer!
  setAddressesOnCustomer(input: SetAddressesOnCustomerInput!): Customer!
  createOneCustomer(input: CreateOneCustomerInput!): Customer!
  createManyCustomers(input: CreateManyCustomersInput!): [Customer!]!
  updateOneCustomer(input: UpdateOneCustomerInput!): Customer!
  updateManyCustomers(input: UpdateManyCustomersInput!): UpdateManyResponse!
  deleteOneCustomer(input: DeleteOneCustomerInput!): CustomerDeleteResponse!
  deleteManyCustomers(input: DeleteManyCustomersInput!): DeleteManyResponse!
  addProductsToProductCategory(input: AddProductsToProductCategoryInput!): ProductCategory!
  setProductsOnProductCategory(input: SetProductsOnProductCategoryInput!): ProductCategory!
  createOneProductCategory(input: CreateOneProductCategoryInput!): ProductCategory!
  createManyProductCategories(input: CreateManyProductCategoriesInput!): [ProductCategory!]!
  updateOneProductCategory(input: UpdateOneProductCategoryInput!): ProductCategory!
  updateManyProductCategories(input: UpdateManyProductCategoriesInput!): UpdateManyResponse!
  deleteOneProductCategory(input: DeleteOneProductCategoryInput!): ProductCategoryDeleteResponse!
  deleteManyProductCategories(input: DeleteManyProductCategoriesInput!): DeleteManyResponse!
  addProductsToProductOptionGroup(input: AddProductsToProductOptionGroupInput!): ProductOptionGroup!
  setProductsOnProductOptionGroup(input: SetProductsOnProductOptionGroupInput!): ProductOptionGroup!
  addOptionsToProductOptionGroup(input: AddOptionsToProductOptionGroupInput!): ProductOptionGroup!
  setOptionsOnProductOptionGroup(input: SetOptionsOnProductOptionGroupInput!): ProductOptionGroup!
  createOneProductOptionGroup(input: CreateOneProductOptionGroupInput!): ProductOptionGroup!
  createManyProductOptionGroups(input: CreateManyProductOptionGroupsInput!): [ProductOptionGroup!]!
  updateOneProductOptionGroup(input: UpdateOneProductOptionGroupInput!): ProductOptionGroup!
  updateManyProductOptionGroups(input: UpdateManyProductOptionGroupsInput!): UpdateManyResponse!
  deleteOneProductOptionGroup(input: DeleteOneProductOptionGroupInput!): ProductOptionGroupDeleteResponse!
  deleteManyProductOptionGroups(input: DeleteManyProductOptionGroupsInput!): DeleteManyResponse!
  createOneProductOption(input: CreateOneProductOptionInput!): ProductOption!
  createManyProductOptions(input: CreateManyProductOptionsInput!): [ProductOption!]!
  updateOneProductOption(input: UpdateOneProductOptionInput!): ProductOption!
  updateManyProductOptions(input: UpdateManyProductOptionsInput!): UpdateManyResponse!
  deleteOneProductOption(input: DeleteOneProductOptionInput!): ProductOptionDeleteResponse!
  deleteManyProductOptions(input: DeleteManyProductOptionsInput!): DeleteManyResponse!
  addProductsToProductType(input: AddProductsToProductTypeInput!): ProductType!
  setProductsOnProductType(input: SetProductsOnProductTypeInput!): ProductType!
  createOneProductType(input: CreateOneProductTypeInput!): ProductType!
  createManyProductTypes(input: CreateManyProductTypesInput!): [ProductType!]!
  updateOneProductType(input: UpdateOneProductTypeInput!): ProductType!
  updateManyProductTypes(input: UpdateManyProductTypesInput!): UpdateManyResponse!
  deleteOneProductType(input: DeleteOneProductTypeInput!): ProductTypeDeleteResponse!
  deleteManyProductTypes(input: DeleteManyProductTypesInput!): DeleteManyResponse!
  addProductsToProductUnit(input: AddProductsToProductUnitInput!): ProductUnit!
  setProductsOnProductUnit(input: SetProductsOnProductUnitInput!): ProductUnit!
  createOneProductUnit(input: CreateOneProductUnitInput!): ProductUnit!
  createManyProductUnits(input: CreateManyProductUnitsInput!): [ProductUnit!]!
  updateOneProductUnit(input: UpdateOneProductUnitInput!): ProductUnit!
  updateManyProductUnits(input: UpdateManyProductUnitsInput!): UpdateManyResponse!
  deleteOneProductUnit(input: DeleteOneProductUnitInput!): ProductUnitDeleteResponse!
  deleteManyProductUnits(input: DeleteManyProductUnitsInput!): DeleteManyResponse!
  setUnitOnProduct(input: SetUnitOnProductInput!): Product!
  addOptionGroupsToProduct(input: AddOptionGroupsToProductInput!): Product!
  setOptionGroupsOnProduct(input: SetOptionGroupsOnProductInput!): Product!
  createOneProduct(input: CreateOneProductInput!): Product!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  productImportByFile(input: ProductImportInput!): [Product!]!
  setProductOnOrderProduct(input: SetProductOnOrderProductInput!): OrderProduct!
  addOptionsToOrderProduct(input: AddOptionsToOrderProductInput!): OrderProduct!
  setOptionsOnOrderProduct(input: SetOptionsOnOrderProductInput!): OrderProduct!
  createOneOrderProduct(input: CreateOneOrderProductInput!): OrderProduct!
  createManyOrderProducts(input: CreateManyOrderProductsInput!): [OrderProduct!]!
  updateOneOrderProduct(input: UpdateOneOrderProductInput!): OrderProduct!
  updateManyOrderProducts(input: UpdateManyOrderProductsInput!): UpdateManyResponse!
  deleteOneOrderProduct(input: DeleteOneOrderProductInput!): OrderProductDeleteResponse!
  deleteManyOrderProducts(input: DeleteManyOrderProductsInput!): DeleteManyResponse!
  createOneOrder(input: CreateOneOrderInput!): Order!
  createManyOrders(input: CreateManyOrdersInput!): [Order!]!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateManyOrders(input: UpdateManyOrdersInput!): UpdateManyResponse!
  deleteOneOrder(input: DeleteOneOrderInput!): OrderDeleteResponse!
  deleteManyOrders(input: DeleteManyOrdersInput!): DeleteManyResponse!
  addMembersToShop(input: AddMembersToShopInput!): Shop!
  setMembersOnShop(input: SetMembersOnShopInput!): Shop!
  createOneShop(input: CreateOneShopInput!): Shop!
  createManyShops(input: CreateManyShopsInput!): [Shop!]!
  updateOneShop(input: UpdateOneShopInput!): Shop!
  updateManyShops(input: UpdateManyShopsInput!): UpdateManyResponse!
  deleteOneShop(input: DeleteOneShopInput!): ShopDeleteResponse!
  deleteManyShops(input: DeleteManyShopsInput!): DeleteManyResponse!
  createOneShopMember(input: CreateOneShopMemberInput!): ShopMember!
  createManyShopMembers(input: CreateManyShopMembersInput!): [ShopMember!]!
  updateOneShopMember(input: UpdateOneShopMemberInput!): ShopMember!
  updateManyShopMembers(input: UpdateManyShopMembersInput!): UpdateManyResponse!
  deleteOneShopMember(input: DeleteOneShopMemberInput!): ShopMemberDeleteResponse!
  deleteManyShopMembers(input: DeleteManyShopMembersInput!): DeleteManyResponse!
  createOneGarage(input: CreateOneGarageInput!): Garage!
  createManyGarages(input: CreateManyGaragesInput!): [Garage!]!
  updateOneGarage(input: UpdateOneGarageInput!): Garage!
  updateManyGarages(input: UpdateManyGaragesInput!): UpdateManyResponse!
  deleteOneGarage(input: DeleteOneGarageInput!): GarageDeleteResponse!
  deleteManyGarages(input: DeleteManyGaragesInput!): DeleteManyResponse!
  createOneUserVehicle(input: CreateOneUserVehicleInput!): UserVehicle!
  createManyUserVehicles(input: CreateManyUserVehiclesInput!): [UserVehicle!]!
  updateOneUserVehicle(input: UpdateOneUserVehicleInput!): UserVehicle!
  updateManyUserVehicles(input: UpdateManyUserVehiclesInput!): UpdateManyResponse!
  deleteOneUserVehicle(input: DeleteOneUserVehicleInput!): UserVehicleDeleteResponse!
  deleteManyUserVehicles(input: DeleteManyUserVehiclesInput!): DeleteManyResponse!
  addVehiclesToUser(input: AddVehiclesToUserInput!): User!
  setVehiclesOnUser(input: SetVehiclesOnUserInput!): User!
  createOneUser(input: CreateOneUserInput!): User!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  createOneVehicleBody(input: CreateOneVehicleBodyInput!): VehicleBody!
  createManyVehicleBodies(input: CreateManyVehicleBodiesInput!): [VehicleBody!]!
  updateOneVehicleBody(input: UpdateOneVehicleBodyInput!): VehicleBody!
  updateManyVehicleBodies(input: UpdateManyVehicleBodiesInput!): UpdateManyResponse!
  deleteOneVehicleBody(input: DeleteOneVehicleBodyInput!): VehicleBodyDeleteResponse!
  deleteManyVehicleBodies(input: DeleteManyVehicleBodiesInput!): DeleteManyResponse!
  createOneVehicleBrand(input: CreateOneVehicleBrandInput!): VehicleBrand!
  createManyVehicleBrands(input: CreateManyVehicleBrandsInput!): [VehicleBrand!]!
  updateOneVehicleBrand(input: UpdateOneVehicleBrandInput!): VehicleBrand!
  updateManyVehicleBrands(input: UpdateManyVehicleBrandsInput!): UpdateManyResponse!
  deleteOneVehicleBrand(input: DeleteOneVehicleBrandInput!): VehicleBrandDeleteResponse!
  deleteManyVehicleBrands(input: DeleteManyVehicleBrandsInput!): DeleteManyResponse!
  createOneVehicleEngine(input: CreateOneVehicleEngineInput!): VehicleEngine!
  createManyVehicleEngines(input: CreateManyVehicleEnginesInput!): [VehicleEngine!]!
  updateOneVehicleEngine(input: UpdateOneVehicleEngineInput!): VehicleEngine!
  updateManyVehicleEngines(input: UpdateManyVehicleEnginesInput!): UpdateManyResponse!
  deleteOneVehicleEngine(input: DeleteOneVehicleEngineInput!): VehicleEngineDeleteResponse!
  deleteManyVehicleEngines(input: DeleteManyVehicleEnginesInput!): DeleteManyResponse!
  createOneVehicleModelBody(input: CreateOneVehicleModelBodyInput!): VehicleModelBody!
  createManyVehicleModelBodies(input: CreateManyVehicleModelBodiesInput!): [VehicleModelBody!]!
  updateOneVehicleModelBody(input: UpdateOneVehicleModelBodyInput!): VehicleModelBody!
  updateManyVehicleModelBodies(input: UpdateManyVehicleModelBodiesInput!): UpdateManyResponse!
  deleteOneVehicleModelBody(input: DeleteOneVehicleModelBodyInput!): VehicleModelBodyDeleteResponse!
  deleteManyVehicleModelBodies(input: DeleteManyVehicleModelBodiesInput!): DeleteManyResponse!
  addBodiesToVehicleModel(input: AddBodiesToVehicleModelInput!): VehicleModel!
  setBodiesOnVehicleModel(input: SetBodiesOnVehicleModelInput!): VehicleModel!
  createOneVehicleModel(input: CreateOneVehicleModelInput!): VehicleModel!
  createManyVehicleModels(input: CreateManyVehicleModelsInput!): [VehicleModel!]!
  updateOneVehicleModel(input: UpdateOneVehicleModelInput!): VehicleModel!
  updateManyVehicleModels(input: UpdateManyVehicleModelsInput!): UpdateManyResponse!
  deleteOneVehicleModel(input: DeleteOneVehicleModelInput!): VehicleModelDeleteResponse!
  deleteManyVehicleModels(input: DeleteManyVehicleModelsInput!): DeleteManyResponse!
  createOneVehicleTransmission(input: CreateOneVehicleTransmissionInput!): VehicleTransmission!
  createManyVehicleTransmissions(input: CreateManyVehicleTransmissionsInput!): [VehicleTransmission!]!
  updateOneVehicleTransmission(input: UpdateOneVehicleTransmissionInput!): VehicleTransmission!
  updateManyVehicleTransmissions(input: UpdateManyVehicleTransmissionsInput!): UpdateManyResponse!
  deleteOneVehicleTransmission(input: DeleteOneVehicleTransmissionInput!): VehicleTransmissionDeleteResponse!
  deleteManyVehicleTransmissions(input: DeleteManyVehicleTransmissionsInput!): DeleteManyResponse!
  createOneServiceLogBill(input: CreateOneServiceLogBillInput!): ServiceLogBill!
  createManyServiceLogBills(input: CreateManyServiceLogBillsInput!): [ServiceLogBill!]!
  updateOneServiceLogBill(input: UpdateOneServiceLogBillInput!): ServiceLogBill!
  updateManyServiceLogBills(input: UpdateManyServiceLogBillsInput!): UpdateManyResponse!
  deleteOneServiceLogBill(input: DeleteOneServiceLogBillInput!): ServiceLogBillDeleteResponse!
  deleteManyServiceLogBills(input: DeleteManyServiceLogBillsInput!): DeleteManyResponse!
  setGarageOnServiceLog(input: SetGarageOnServiceLogInput!): ServiceLog!
  addBillsToServiceLog(input: AddBillsToServiceLogInput!): ServiceLog!
  setBillsOnServiceLog(input: SetBillsOnServiceLogInput!): ServiceLog!
  createOneServiceLog(input: CreateOneServiceLogInput!): ServiceLog!
  createManyServiceLogs(input: CreateManyServiceLogsInput!): [ServiceLog!]!
  updateOneServiceLog(input: UpdateOneServiceLogInput!): ServiceLog!
  updateManyServiceLogs(input: UpdateManyServiceLogsInput!): UpdateManyResponse!
  deleteOneServiceLog(input: DeleteOneServiceLogInput!): ServiceLogDeleteResponse!
  deleteManyServiceLogs(input: DeleteManyServiceLogsInput!): DeleteManyResponse!
}

input AuthLoginInput {
  email: String!
  password: String!
  useCode: Boolean = false
}

input AuthRefreshTokenInput {
  accountId: String!
  refreshToken: String!
}

input AuthRegisterInput {
  email: String!
  password: String!
  firstName: String
  lastName: String
  useCode: Boolean = false
  createUser: Boolean = false
}

input AuthResendVerificationInput {
  token: String!
}

input AuthResendVerificationWithEmailInput {
  email: String!
  useCode: Boolean! = false
}

input AuthVerifyAccountInput {
  token: String!
}

input AuthVerifyAccountByCodeInput {
  email: String!
  code: String!
}

input AuthRequestPasswordResetInput {
  email: String!
  useCode: Boolean = false
}

input AuthConfirmPasswordResetInput {
  token: String!
  password: String!
}

input AuthConfirmPasswordResetByCodeInput {
  email: String!
  code: String!
  password: String!
}

input SetUserOnAccountInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneAccountInput {
  """The record to create"""
  account: AccountDTO!
}

input AccountDTO {
  email: String!
  role: AccountRole!
  firstName: String
  lastName: String
  user: UserDTO!
}

input UserDTO {
  phone_number: String
  avatar: String
  status: UserStatus!
  account: ID!
}

input CreateManyAccountsInput {
  """Array of records to create"""
  accounts: [AccountDTO!]!
}

input UpdateOneAccountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: AccountDTO!
}

input UpdateManyAccountsInput {
  """Filter used to find fields to update"""
  filter: AccountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: AccountDTO!
}

input AccountUpdateFilter {
  and: [AccountUpdateFilter!]
  or: [AccountUpdateFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneAccountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAccountsInput {
  """Filter to find records to delete"""
  filter: AccountDeleteFilter!
}

input AccountDeleteFilter {
  and: [AccountDeleteFilter!]
  or: [AccountDeleteFilter!]
  email: StringFieldComparison
  role: AccountRoleFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  id: IDFilterComparison
  emailVerified: BooleanFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneAccountVerficationInput {
  """The record to create"""
  accountVerfication: AccountVerficationDTO!
}

input AccountVerficationDTO {
  token: String!
  code: String!
  account: ID!
}

input CreateManyAccountVerficationsInput {
  """Array of records to create"""
  accountVerfications: [AccountVerficationDTO!]!
}

input UpdateOneAccountVerficationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: AccountVerficationDTO!
}

input UpdateManyAccountVerficationsInput {
  """Filter used to find fields to update"""
  filter: AccountVerficationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: AccountVerficationDTO!
}

input AccountVerficationUpdateFilter {
  and: [AccountVerficationUpdateFilter!]
  or: [AccountVerficationUpdateFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneAccountVerficationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAccountVerficationsInput {
  """Filter to find records to delete"""
  filter: AccountVerficationDeleteFilter!
}

input AccountVerficationDeleteFilter {
  and: [AccountVerficationDeleteFilter!]
  or: [AccountVerficationDeleteFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneAccountPasswordResetInput {
  """The record to create"""
  accountPasswordReset: AccountPasswordResetDTO!
}

input AccountPasswordResetDTO {
  token: String!
  code: String!
  account: ID!
}

input CreateManyAccountPasswordResetsInput {
  """Array of records to create"""
  accountPasswordResets: [AccountPasswordResetDTO!]!
}

input UpdateOneAccountPasswordResetInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: AccountPasswordResetDTO!
}

input UpdateManyAccountPasswordResetsInput {
  """Filter used to find fields to update"""
  filter: AccountPasswordResetUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: AccountPasswordResetDTO!
}

input AccountPasswordResetUpdateFilter {
  and: [AccountPasswordResetUpdateFilter!]
  or: [AccountPasswordResetUpdateFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneAccountPasswordResetInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyAccountPasswordResetsInput {
  """Filter to find records to delete"""
  filter: AccountPasswordResetDeleteFilter!
}

input AccountPasswordResetDeleteFilter {
  and: [AccountPasswordResetDeleteFilter!]
  or: [AccountPasswordResetDeleteFilter!]
  token: StringFieldComparison
  code: StringFieldComparison
  id: IDFilterComparison
  used: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneFileInput {
  """The record to create"""
  file: FileDTO!
}

input FileDTO {
  name: String!
  mimetype: String!
  refId: String
  url: String!
  secureUrl: String
  createdBy: ID
}

input CreateManyFilesInput {
  """Array of records to create"""
  files: [FileDTO!]!
}

input UpdateOneFileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: FileDTO!
}

input UpdateManyFilesInput {
  """Filter used to find fields to update"""
  filter: FileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: FileDTO!
}

input FileUpdateFilter {
  and: [FileUpdateFilter!]
  or: [FileUpdateFilter!]
  name: StringFieldComparison
  mimetype: StringFieldComparison
  refId: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneFileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyFilesInput {
  """Filter to find records to delete"""
  filter: FileDeleteFilter!
}

input FileDeleteFilter {
  and: [FileDeleteFilter!]
  or: [FileDeleteFilter!]
  name: StringFieldComparison
  mimetype: StringFieldComparison
  refId: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneApiKeyInput {
  """The record to create"""
  apiKey: ApiKeyDTO!
}

input ApiKeyDTO {
  name: String!
  key: String!
  secret: String!
}

input CreateManyApiKeysInput {
  """Array of records to create"""
  apiKeys: [ApiKeyDTO!]!
}

input UpdateOneApiKeyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ApiKeyDTO!
}

input UpdateManyApiKeysInput {
  """Filter used to find fields to update"""
  filter: ApiKeyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ApiKeyDTO!
}

input ApiKeyUpdateFilter {
  and: [ApiKeyUpdateFilter!]
  or: [ApiKeyUpdateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  expired: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneApiKeyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyApiKeysInput {
  """Filter to find records to delete"""
  filter: ApiKeyDeleteFilter!
}

input ApiKeyDeleteFilter {
  and: [ApiKeyDeleteFilter!]
  or: [ApiKeyDeleteFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  expired: BooleanFieldComparison
  expiredAt: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneOrgBranchMemberInput {
  """The record to create"""
  orgBranchMember: OrgBranchMemberDTO!
}

input OrgBranchMemberDTO {
  role: OrgBranchRole!
  enabled: Boolean
  account: ID!
  branch: ID
}

input CreateManyOrgBranchMembersInput {
  """Array of records to create"""
  orgBranchMembers: [OrgBranchMemberDTO!]!
}

input UpdateOneOrgBranchMemberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrgBranchMemberDTO!
}

input UpdateManyOrgBranchMembersInput {
  """Filter used to find fields to update"""
  filter: OrgBranchMemberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrgBranchMemberDTO!
}

input OrgBranchMemberUpdateFilter {
  and: [OrgBranchMemberUpdateFilter!]
  or: [OrgBranchMemberUpdateFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrgBranchMemberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrgBranchMembersInput {
  """Filter to find records to delete"""
  filter: OrgBranchMemberDeleteFilter!
}

input OrgBranchMemberDeleteFilter {
  and: [OrgBranchMemberDeleteFilter!]
  or: [OrgBranchMemberDeleteFilter!]
  role: OrgBranchRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddMembersToOrgBranchInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetMembersOnOrgBranchInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneOrgBranchInput {
  """The record to create"""
  orgBranch: OrgBranchDTO!
}

input OrgBranchDTO {
  name: String!
  phone_number: String
  details: JSON
  status: OrgBranchStatus!
  org: ID
  members: [OrgBranchMemberDTO!]
}

input CreateManyOrgBranchesInput {
  """Array of records to create"""
  orgBranches: [OrgBranchDTO!]!
}

input UpdateOneOrgBranchInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrgBranchDTO!
}

input UpdateManyOrgBranchesInput {
  """Filter used to find fields to update"""
  filter: OrgBranchUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrgBranchDTO!
}

input OrgBranchUpdateFilter {
  and: [OrgBranchUpdateFilter!]
  or: [OrgBranchUpdateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrgBranchInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrgBranchesInput {
  """Filter to find records to delete"""
  filter: OrgBranchDeleteFilter!
}

input OrgBranchDeleteFilter {
  and: [OrgBranchDeleteFilter!]
  or: [OrgBranchDeleteFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  details: JSONFilterComparison
  status: OrgBranchStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneOrgMemberInput {
  """The record to create"""
  orgMember: OrgMemberDTO!
}

input OrgMemberDTO {
  role: OrgRole!
  enabled: Boolean
  account: ID!
  org: ID
}

input CreateManyOrgMembersInput {
  """Array of records to create"""
  orgMembers: [OrgMemberDTO!]!
}

input UpdateOneOrgMemberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrgMemberDTO!
}

input UpdateManyOrgMembersInput {
  """Filter used to find fields to update"""
  filter: OrgMemberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrgMemberDTO!
}

input OrgMemberUpdateFilter {
  and: [OrgMemberUpdateFilter!]
  or: [OrgMemberUpdateFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrgMemberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrgMembersInput {
  """Filter to find records to delete"""
  filter: OrgMemberDeleteFilter!
}

input OrgMemberDeleteFilter {
  and: [OrgMemberDeleteFilter!]
  or: [OrgMemberDeleteFilter!]
  role: OrgRoleFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddMembersToOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetMembersOnOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddBranchesToOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetBranchesOnOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddShopsToOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetShopsOnOrgInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneOrgInput {
  """The record to create"""
  org: OrgDTO!
}

input OrgDTO {
  type: OrgType!
  name: String!
  details: JSON
  status: OrgStatus!
  createdBy: ID
  members: [OrgMemberDTO!]
  branches: [OrgBranchDTO!]
}

input CreateManyOrgsInput {
  """Array of records to create"""
  orgs: [OrgDTO!]!
}

input UpdateOneOrgInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrgDTO!
}

input UpdateManyOrgsInput {
  """Filter used to find fields to update"""
  filter: OrgUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrgDTO!
}

input OrgUpdateFilter {
  and: [OrgUpdateFilter!]
  or: [OrgUpdateFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrgInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrgsInput {
  """Filter to find records to delete"""
  filter: OrgDeleteFilter!
}

input OrgDeleteFilter {
  and: [OrgDeleteFilter!]
  or: [OrgDeleteFilter!]
  type: OrgTypeFilterComparison
  name: StringFieldComparison
  status: OrgStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddAddressesToCustomerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAddressesOnCustomerInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCustomerInput {
  """The record to create"""
  customer: CustomerDTO!
}

input CustomerDTO {
  phone: String!
  email: String
  firstName: String
  lastName: String
  gender: CustomerGender!
  OneToMany: [CustomerAddressDTO!]
}

input CustomerAddressDTO {
  full: String
  distanceKm: Float
  city: String
  district: String
  ward: String
  customer: ID!
}

input CreateManyCustomersInput {
  """Array of records to create"""
  customers: [CustomerDTO!]!
}

input UpdateOneCustomerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: CustomerDTO!
}

input UpdateManyCustomersInput {
  """Filter used to find fields to update"""
  filter: CustomerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: CustomerDTO!
}

input CustomerUpdateFilter {
  and: [CustomerUpdateFilter!]
  or: [CustomerUpdateFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneCustomerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCustomersInput {
  """Filter to find records to delete"""
  filter: CustomerDeleteFilter!
}

input CustomerDeleteFilter {
  and: [CustomerDeleteFilter!]
  or: [CustomerDeleteFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  gender: CustomerGenderFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddProductsToProductCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnProductCategoryInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductCategoryInput {
  """The record to create"""
  productCategory: ProductCategoryDTO!
}

input ProductCategoryDTO {
  sku: String
  name: String!
  branch: ID
  products: [ProductDTO!]
}

input ProductDTO {
  sku: String
  image: String
  name: String!
  price: Float!
  description: String
  enabled: Boolean
  branch: ID
  categories: [ID!]
  type: ID
  unit: ID
}

input CreateManyProductCategoriesInput {
  """Array of records to create"""
  productCategories: [ProductCategoryDTO!]!
}

input UpdateOneProductCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductCategoryDTO!
}

input UpdateManyProductCategoriesInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductCategoryDTO!
}

input ProductCategoryUpdateFilter {
  and: [ProductCategoryUpdateFilter!]
  or: [ProductCategoryUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductCategoriesInput {
  """Filter to find records to delete"""
  filter: ProductCategoryDeleteFilter!
}

input ProductCategoryDeleteFilter {
  and: [ProductCategoryDeleteFilter!]
  or: [ProductCategoryDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddProductsToProductOptionGroupInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnProductOptionGroupInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddOptionsToProductOptionGroupInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOptionsOnProductOptionGroupInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductOptionGroupInput {
  """The record to create"""
  productOptionGroup: ProductOptionGroupDTO!
}

input ProductOptionGroupDTO {
  sku: String
  name: String!
  options: [ProductOptionDTO!]
  products: [ID!]
}

input ProductOptionDTO {
  sku: String
  name: String!
  diffPrice: Float!
  group: ID
}

input CreateManyProductOptionGroupsInput {
  """Array of records to create"""
  productOptionGroups: [ProductOptionGroupDTO!]!
}

input UpdateOneProductOptionGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductOptionGroupDTO!
}

input UpdateManyProductOptionGroupsInput {
  """Filter used to find fields to update"""
  filter: ProductOptionGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductOptionGroupDTO!
}

input ProductOptionGroupUpdateFilter {
  and: [ProductOptionGroupUpdateFilter!]
  or: [ProductOptionGroupUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductOptionGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductOptionGroupsInput {
  """Filter to find records to delete"""
  filter: ProductOptionGroupDeleteFilter!
}

input ProductOptionGroupDeleteFilter {
  and: [ProductOptionGroupDeleteFilter!]
  or: [ProductOptionGroupDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneProductOptionInput {
  """The record to create"""
  productOption: ProductOptionDTO!
}

input CreateManyProductOptionsInput {
  """Array of records to create"""
  productOptions: [ProductOptionDTO!]!
}

input UpdateOneProductOptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductOptionDTO!
}

input UpdateManyProductOptionsInput {
  """Filter used to find fields to update"""
  filter: ProductOptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductOptionDTO!
}

input ProductOptionUpdateFilter {
  and: [ProductOptionUpdateFilter!]
  or: [ProductOptionUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductOptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductOptionsInput {
  """Filter to find records to delete"""
  filter: ProductOptionDeleteFilter!
}

input ProductOptionDeleteFilter {
  and: [ProductOptionDeleteFilter!]
  or: [ProductOptionDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  diffPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddProductsToProductTypeInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnProductTypeInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductTypeInput {
  """The record to create"""
  productType: ProductTypeDTO!
}

input ProductTypeDTO {
  sku: String
  name: String!
  branch: ID
  products: [ID!]
}

input CreateManyProductTypesInput {
  """Array of records to create"""
  productTypes: [ProductTypeDTO!]!
}

input UpdateOneProductTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductTypeDTO!
}

input UpdateManyProductTypesInput {
  """Filter used to find fields to update"""
  filter: ProductTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductTypeDTO!
}

input ProductTypeUpdateFilter {
  and: [ProductTypeUpdateFilter!]
  or: [ProductTypeUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductTypesInput {
  """Filter to find records to delete"""
  filter: ProductTypeDeleteFilter!
}

input ProductTypeDeleteFilter {
  and: [ProductTypeDeleteFilter!]
  or: [ProductTypeDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddProductsToProductUnitInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetProductsOnProductUnitInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductUnitInput {
  """The record to create"""
  productUnit: ProductUnitDTO!
}

input ProductUnitDTO {
  sku: String
  name: String!
  branch: ID
  products: [ID!]
}

input CreateManyProductUnitsInput {
  """Array of records to create"""
  productUnits: [ProductUnitDTO!]!
}

input UpdateOneProductUnitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductUnitDTO!
}

input UpdateManyProductUnitsInput {
  """Filter used to find fields to update"""
  filter: ProductUnitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductUnitDTO!
}

input ProductUnitUpdateFilter {
  and: [ProductUnitUpdateFilter!]
  or: [ProductUnitUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductUnitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductUnitsInput {
  """Filter to find records to delete"""
  filter: ProductUnitDeleteFilter!
}

input ProductUnitDeleteFilter {
  and: [ProductUnitDeleteFilter!]
  or: [ProductUnitDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetUnitOnProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddOptionGroupsToProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOptionGroupsOnProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneProductInput {
  """The record to create"""
  product: ProductDTO!
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [ProductDTO!]!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProductDTO!
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ProductDTO!
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  or: [ProductUpdateFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  or: [ProductDeleteFilter!]
  sku: StringFieldComparison
  name: StringFieldComparison
  price: NumberFieldComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ProductImportInput {
  branchId: ID!
  fileId: ID!
}

input SetProductOnOrderProductInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddOptionsToOrderProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOptionsOnOrderProductInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneOrderProductInput {
  """The record to create"""
  orderProduct: OrderProductDTO!
}

input OrderProductDTO {
  quantity: Float!
  grossPrice: Float
  discountPrice: Float
  netPrice: Float!
  order: ID!
  product: ProductDTO!
  options: [ProductOptionDTO!]!
}

input CreateManyOrderProductsInput {
  """Array of records to create"""
  orderProducts: [OrderProductDTO!]!
}

input UpdateOneOrderProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrderProductDTO!
}

input UpdateManyOrderProductsInput {
  """Filter used to find fields to update"""
  filter: OrderProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrderProductDTO!
}

input OrderProductUpdateFilter {
  and: [OrderProductUpdateFilter!]
  or: [OrderProductUpdateFilter!]
  quantity: NumberFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrderProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrderProductsInput {
  """Filter to find records to delete"""
  filter: OrderProductDeleteFilter!
}

input OrderProductDeleteFilter {
  and: [OrderProductDeleteFilter!]
  or: [OrderProductDeleteFilter!]
  quantity: NumberFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneOrderInput {
  """The record to create"""
  order: OrderDTO!
}

input OrderDTO {
  refId: String
  grossPrice: Float
  discountPrice: Float
  commissionPercent: Float
  commissionPrice: Float
  netPrice: Float!
  note: String
  shippingAddressStreetAndNo: String
  shippingAddressWard: String
  shippingAddressDistrict: String
  shippingAddressCity: String
  shippingAddressCoutry: String
  shippingAddressPostalCode: String
  shippingAddressFull: String
  branch: ID!
  customer: ID!
  products: [OrderProductDTO!]
}

input CreateManyOrdersInput {
  """Array of records to create"""
  orders: [OrderDTO!]!
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: OrderDTO!
}

input UpdateManyOrdersInput {
  """Filter used to find fields to update"""
  filter: OrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: OrderDTO!
}

input OrderUpdateFilter {
  and: [OrderUpdateFilter!]
  or: [OrderUpdateFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyOrdersInput {
  """Filter to find records to delete"""
  filter: OrderDeleteFilter!
}

input OrderDeleteFilter {
  and: [OrderDeleteFilter!]
  or: [OrderDeleteFilter!]
  refId: StringFieldComparison
  grossPrice: NumberFieldComparison
  discountPrice: NumberFieldComparison
  commissionPercent: NumberFieldComparison
  commissionPrice: NumberFieldComparison
  netPrice: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddMembersToShopInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetMembersOnShopInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneShopInput {
  """The record to create"""
  shop: ShopDTO!
}

input ShopDTO {
  name: String!
  details: JSON
  enabled: Boolean
  org: ID
  branch: ID
  members: [ShopMemberDTO!]
}

input ShopMemberDTO {
  role: ShopMemberRole!
  account: ID!
  shop: ID
}

input CreateManyShopsInput {
  """Array of records to create"""
  shops: [ShopDTO!]!
}

input UpdateOneShopInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ShopDTO!
}

input UpdateManyShopsInput {
  """Filter used to find fields to update"""
  filter: ShopUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ShopDTO!
}

input ShopUpdateFilter {
  and: [ShopUpdateFilter!]
  or: [ShopUpdateFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneShopInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyShopsInput {
  """Filter to find records to delete"""
  filter: ShopDeleteFilter!
}

input ShopDeleteFilter {
  and: [ShopDeleteFilter!]
  or: [ShopDeleteFilter!]
  name: StringFieldComparison
  details: JSONFilterComparison
  enabled: BooleanFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneShopMemberInput {
  """The record to create"""
  shopMember: ShopMemberDTO!
}

input CreateManyShopMembersInput {
  """Array of records to create"""
  shopMembers: [ShopMemberDTO!]!
}

input UpdateOneShopMemberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ShopMemberDTO!
}

input UpdateManyShopMembersInput {
  """Filter used to find fields to update"""
  filter: ShopMemberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ShopMemberDTO!
}

input ShopMemberUpdateFilter {
  and: [ShopMemberUpdateFilter!]
  or: [ShopMemberUpdateFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneShopMemberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyShopMembersInput {
  """Filter to find records to delete"""
  filter: ShopMemberDeleteFilter!
}

input ShopMemberDeleteFilter {
  and: [ShopMemberDeleteFilter!]
  or: [ShopMemberDeleteFilter!]
  role: ShopMemberRoleFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneGarageInput {
  """The record to create"""
  garage: GarageDTO!
}

input GarageDTO {
  name: String!
  description: String
  phone_number: String
  gplace_id: String
  addressStreetAndNo: String
  addressWard: String
  addressDistrict: String
  addressCity: String
  addressCoutry: String
  addressPostalCode: String
  addressFull: String
  lat: Float
  lng: Float
  logo: String
  media: [String!]
  status: GarageStatus
  metadata: JSON
  org: ID
  branch: ID
}

input CreateManyGaragesInput {
  """Array of records to create"""
  garages: [GarageDTO!]!
}

input UpdateOneGarageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: GarageDTO!
}

input UpdateManyGaragesInput {
  """Filter used to find fields to update"""
  filter: GarageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: GarageDTO!
}

input GarageUpdateFilter {
  and: [GarageUpdateFilter!]
  or: [GarageUpdateFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneGarageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyGaragesInput {
  """Filter to find records to delete"""
  filter: GarageDeleteFilter!
}

input GarageDeleteFilter {
  and: [GarageDeleteFilter!]
  or: [GarageDeleteFilter!]
  name: StringFieldComparison
  phone_number: StringFieldComparison
  gplace_id: StringFieldComparison
  lat: NumberFieldComparison
  lng: NumberFieldComparison
  status: GarageStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneUserVehicleInput {
  """The record to create"""
  userVehicle: UserVehicleDTO!
}

input UserVehicleDTO {
  name: String
  customModel: String
  picture: String
  status: UserVechileStatus
  metadata: JSON
  owner: ID
  model: ID
  body: ID
  engine: ID
  transmission: ID
}

input CreateManyUserVehiclesInput {
  """Array of records to create"""
  userVehicles: [UserVehicleDTO!]!
}

input UpdateOneUserVehicleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserVehicleDTO!
}

input UpdateManyUserVehiclesInput {
  """Filter used to find fields to update"""
  filter: UserVehicleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserVehicleDTO!
}

input UserVehicleUpdateFilter {
  and: [UserVehicleUpdateFilter!]
  or: [UserVehicleUpdateFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneUserVehicleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUserVehiclesInput {
  """Filter to find records to delete"""
  filter: UserVehicleDeleteFilter!
}

input UserVehicleDeleteFilter {
  and: [UserVehicleDeleteFilter!]
  or: [UserVehicleDeleteFilter!]
  name: StringFieldComparison
  customModel: StringFieldComparison
  status: UserVechileStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddVehiclesToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetVehiclesOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserDTO!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [UserDTO!]!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserDTO!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UserDTO!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  phone_number: StringFieldComparison
  status: UserStatusFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneVehicleBodyInput {
  """The record to create"""
  vehicleBody: VehicleBodyDTO!
}

input VehicleBodyDTO {
  name: String!
  metadata: JSON
}

input CreateManyVehicleBodiesInput {
  """Array of records to create"""
  vehicleBodies: [VehicleBodyDTO!]!
}

input UpdateOneVehicleBodyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleBodyDTO!
}

input UpdateManyVehicleBodiesInput {
  """Filter used to find fields to update"""
  filter: VehicleBodyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleBodyDTO!
}

input VehicleBodyUpdateFilter {
  and: [VehicleBodyUpdateFilter!]
  or: [VehicleBodyUpdateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleBodyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleBodiesInput {
  """Filter to find records to delete"""
  filter: VehicleBodyDeleteFilter!
}

input VehicleBodyDeleteFilter {
  and: [VehicleBodyDeleteFilter!]
  or: [VehicleBodyDeleteFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneVehicleBrandInput {
  """The record to create"""
  vehicleBrand: VehicleBrandDTO!
}

input VehicleBrandDTO {
  name: String!
  startYear: Int
  endYear: Int
  logo: String
  metadata: JSON
}

input CreateManyVehicleBrandsInput {
  """Array of records to create"""
  vehicleBrands: [VehicleBrandDTO!]!
}

input UpdateOneVehicleBrandInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleBrandDTO!
}

input UpdateManyVehicleBrandsInput {
  """Filter used to find fields to update"""
  filter: VehicleBrandUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleBrandDTO!
}

input VehicleBrandUpdateFilter {
  and: [VehicleBrandUpdateFilter!]
  or: [VehicleBrandUpdateFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  endYear: IntFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleBrandInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleBrandsInput {
  """Filter to find records to delete"""
  filter: VehicleBrandDeleteFilter!
}

input VehicleBrandDeleteFilter {
  and: [VehicleBrandDeleteFilter!]
  or: [VehicleBrandDeleteFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  endYear: IntFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneVehicleEngineInput {
  """The record to create"""
  vehicleEngine: VehicleEngineDTO!
}

input VehicleEngineDTO {
  name: String!
  metadata: JSON
}

input CreateManyVehicleEnginesInput {
  """Array of records to create"""
  vehicleEngines: [VehicleEngineDTO!]!
}

input UpdateOneVehicleEngineInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleEngineDTO!
}

input UpdateManyVehicleEnginesInput {
  """Filter used to find fields to update"""
  filter: VehicleEngineUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleEngineDTO!
}

input VehicleEngineUpdateFilter {
  and: [VehicleEngineUpdateFilter!]
  or: [VehicleEngineUpdateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleEngineInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleEnginesInput {
  """Filter to find records to delete"""
  filter: VehicleEngineDeleteFilter!
}

input VehicleEngineDeleteFilter {
  and: [VehicleEngineDeleteFilter!]
  or: [VehicleEngineDeleteFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneVehicleModelBodyInput {
  """The record to create"""
  vehicleModelBody: VehicleModelBodyDTO!
}

input VehicleModelBodyDTO {
  picture: String
  model: VehicleModelDTO!
  body: VehicleBodyDTO!
}

input VehicleModelDTO {
  name: String!
  startYear: Int!
  metadata: JSON
  brand: ID!
  parent: ID!
  bodies: [VehicleModelBodyDTO!]!
  engines: [ID!]!
  transmissions: [ID!]!
}

input CreateManyVehicleModelBodiesInput {
  """Array of records to create"""
  vehicleModelBodies: [VehicleModelBodyDTO!]!
}

input UpdateOneVehicleModelBodyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleModelBodyDTO!
}

input UpdateManyVehicleModelBodiesInput {
  """Filter used to find fields to update"""
  filter: VehicleModelBodyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleModelBodyDTO!
}

input VehicleModelBodyUpdateFilter {
  and: [VehicleModelBodyUpdateFilter!]
  or: [VehicleModelBodyUpdateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleModelBodyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleModelBodiesInput {
  """Filter to find records to delete"""
  filter: VehicleModelBodyDeleteFilter!
}

input VehicleModelBodyDeleteFilter {
  and: [VehicleModelBodyDeleteFilter!]
  or: [VehicleModelBodyDeleteFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddBodiesToVehicleModelInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetBodiesOnVehicleModelInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneVehicleModelInput {
  """The record to create"""
  vehicleModel: VehicleModelDTO!
}

input CreateManyVehicleModelsInput {
  """Array of records to create"""
  vehicleModels: [VehicleModelDTO!]!
}

input UpdateOneVehicleModelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleModelDTO!
}

input UpdateManyVehicleModelsInput {
  """Filter used to find fields to update"""
  filter: VehicleModelUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleModelDTO!
}

input VehicleModelUpdateFilter {
  and: [VehicleModelUpdateFilter!]
  or: [VehicleModelUpdateFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleModelInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleModelsInput {
  """Filter to find records to delete"""
  filter: VehicleModelDeleteFilter!
}

input VehicleModelDeleteFilter {
  and: [VehicleModelDeleteFilter!]
  or: [VehicleModelDeleteFilter!]
  name: StringFieldComparison
  startYear: IntFieldComparison
  id: IDFilterComparison
  endYear: IntFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneVehicleTransmissionInput {
  """The record to create"""
  vehicleTransmission: VehicleTransmissionDTO!
}

input VehicleTransmissionDTO {
  name: String!
  metadata: JSON
}

input CreateManyVehicleTransmissionsInput {
  """Array of records to create"""
  vehicleTransmissions: [VehicleTransmissionDTO!]!
}

input UpdateOneVehicleTransmissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: VehicleTransmissionDTO!
}

input UpdateManyVehicleTransmissionsInput {
  """Filter used to find fields to update"""
  filter: VehicleTransmissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: VehicleTransmissionDTO!
}

input VehicleTransmissionUpdateFilter {
  and: [VehicleTransmissionUpdateFilter!]
  or: [VehicleTransmissionUpdateFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneVehicleTransmissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyVehicleTransmissionsInput {
  """Filter to find records to delete"""
  filter: VehicleTransmissionDeleteFilter!
}

input VehicleTransmissionDeleteFilter {
  and: [VehicleTransmissionDeleteFilter!]
  or: [VehicleTransmissionDeleteFilter!]
  name: StringFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneServiceLogBillInput {
  """The record to create"""
  serviceLogBill: ServiceLogBillDTO!
}

input ServiceLogBillDTO {
  total: Float!
  media: [String!]
  log: ID!
}

input CreateManyServiceLogBillsInput {
  """Array of records to create"""
  serviceLogBills: [ServiceLogBillDTO!]!
}

input UpdateOneServiceLogBillInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ServiceLogBillDTO!
}

input UpdateManyServiceLogBillsInput {
  """Filter used to find fields to update"""
  filter: ServiceLogBillUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ServiceLogBillDTO!
}

input ServiceLogBillUpdateFilter {
  and: [ServiceLogBillUpdateFilter!]
  or: [ServiceLogBillUpdateFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneServiceLogBillInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyServiceLogBillsInput {
  """Filter to find records to delete"""
  filter: ServiceLogBillDeleteFilter!
}

input ServiceLogBillDeleteFilter {
  and: [ServiceLogBillDeleteFilter!]
  or: [ServiceLogBillDeleteFilter!]
  total: NumberFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetGarageOnServiceLogInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddBillsToServiceLogInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetBillsOnServiceLogInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneServiceLogInput {
  """The record to create"""
  serviceLog: ServiceLogDTO!
}

input ServiceLogDTO {
  type: ServiceLogType!
  description: String
  date: DateTime
  mileage: Float
  media: [String!]
  customGarage: String
  vehicle: ID!
  garageId: ID
  garage: GarageDTO
  bills: [ServiceLogBillDTO!]
}

input CreateManyServiceLogsInput {
  """Array of records to create"""
  serviceLogs: [ServiceLogDTO!]!
}

input UpdateOneServiceLogInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ServiceLogDTO!
}

input UpdateManyServiceLogsInput {
  """Filter used to find fields to update"""
  filter: ServiceLogUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: ServiceLogDTO!
}

input ServiceLogUpdateFilter {
  and: [ServiceLogUpdateFilter!]
  or: [ServiceLogUpdateFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneServiceLogInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyServiceLogsInput {
  """Filter to find records to delete"""
  filter: ServiceLogDeleteFilter!
}

input ServiceLogDeleteFilter {
  and: [ServiceLogDeleteFilter!]
  or: [ServiceLogDeleteFilter!]
  type: ServiceLogTypeFilterComparison
  description: StringFieldComparison
  date: DateFieldComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}